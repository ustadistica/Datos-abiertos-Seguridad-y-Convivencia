# -*- coding: utf-8 -*-
"""2018--2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a_Z2morMPZb0x-vwtCYB1h2SmW3JFWBp

2018
"""

import pandas as pd

def cargar_delito(url, delito):
    # Por defecto fila 10
    posibles_headers = [10, 9]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            # Normalizar nombres
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            # Diccionario para unificar columnas
            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            # Seleccionar solo columnas clave
            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            # Eliminar filas completamente vac√≠as
            df = df.dropna(how="all")

            # Eliminar basura
            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                # CODIGO_DANE num√©rico
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception as e:
            continue

    print(f"‚ö†Ô∏è {delito}: no se pudo leer con header 9 o 10")
    return pd.DataFrame()


# Diccionario de URLs y delitos para 2018
urls_2018 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato_2018_2.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_2018_1.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_2018_0.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_2018_3.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202018.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_en_accidente_de_transito_2018_1.xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_personas_2018_1.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_residencias_2018_1.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_2018_1.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_motocicletas_2018_0.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_2018_2.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_entidades_financieras_2018_0.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_2018_0.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_2018_0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/pirateria_terrestre_2018_1.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_2018_3.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_2018_2.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_2018_1.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos 2018
dfs_2018 = []
for url, delito in urls_2018:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2018.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2018 = pd.concat(dfs_2018, ignore_index=True)

print(f"\nTotal final 2018: {df_2018.shape[0]} filas y {df_2018.shape[1]} columnas")
display(df_2018.head())

pd.read_excel("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_2018_3.xlsx", header=10).head()

# Filtrar solo Hurto de cabezas de ganado
df_hurto = df_2018[df_2018["TIPO_DELITO"] == "HURTO CABEZAS GANADO"]

# Contar los NaN por columna
nulos_hurto = df_hurto.isna().sum()

print(nulos_hurto)

df_2018.isna().sum()

df_2018['MUNICIPIO'].value_counts(dropna=False).head(10)

print(df_2018['MUNICIPIO'].dtype)   # tipo de dato real
print(df_2018['MUNICIPIO'].isna().sum())  # conteo de nulos
print(df_2018['MUNICIPIO'].head(20))      # primeros valores

df_2018[df_2018['MUNICIPIO'].isna()]

# Ordenar alfab√©ticamente por MUNICIPIO
df_2018 = df_2018.sort_values(by=["MUNICIPIO"], ascending=True).reset_index(drop=True)

print(f"\n Total ordenado: {df_2018.shape[0]} filas y {df_2018.shape[1]} columnas")
display(df_2018.head(20))  # muestra los primeros 20 municipios ordenados

"""2019"""

def cargar_delito(url, delito):
    # Por defecto fila 10
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            # Normalizar nombres
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            # Diccionario para unificar columnas
            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            # Seleccionar solo columnas clave
            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            # Eliminar filas completamente vac√≠as
            df = df.dropna(how="all")

            # Eliminar basura
            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                # CODIGO_DANE num√©rico
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception as e:
            continue

    print(f"‚ö†Ô∏è {delito}: no se pudo leer con header 9 o 10")
    return pd.DataFrame()

# Diccionario de URLs y delitos para 2019
urls_2019 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato_2019_3.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_2019_1.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_2019_0.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_2019_2.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202019.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_en_accidente_de_transito_2019.xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_personas_2019_0.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_residencias_2019_0.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_2019_0.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_motocicletas_2019_0.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_2019_0.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_entidades_financieras_2019_3.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_2019_0.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_2019_0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/pirateria_terrestre_2019_3.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_2019_3.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_2019_2.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_2019_0.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos 2019
dfs_2019 = []
for url, delito in urls_2019:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2019.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2019 = pd.concat(dfs_2019, ignore_index=True)

print(f"\nTotal final 2019: {df_2019.shape[0]} filas y {df_2019.shape[1]} columnas")
display(df_2019.head())

df_2019.isna().sum()

df_2019[df_2019['ARMAS_MEDIOS'].isna()]

"""2020"""

def cargar_delito(url, delito):
    # Por defecto fila 10
    posibles_headers = [10, 9]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            # Normalizar nombres
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            # Diccionario para unificar columnas
            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            # Seleccionar solo columnas clave
            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            # Eliminar filas completamente vac√≠as
            df = df.dropna(how="all")

            # Eliminar basura
            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                # CODIGO_DANE num√©rico
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception as e:
            continue

    print(f"‚ö†Ô∏è {delito}: no se pudo leer con header 9 o 10")
    return pd.DataFrame()


# Diccionario de URLs y delitos 2020
urls_2020 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato_2020.xls", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_2020.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_2020.xls", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_2020_1.xls", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202020.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_accidente_de_transito_2020_2.xls", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_personas_2020_0.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_residencias_2020.xls", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_2020_1.xls", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_motocicletas_2020.xls", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_2020.xls", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_entidades_financieras_2020.xls", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_2020_1.xls", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_2020.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/pirateria_terrestre_2020_1.xls", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_2020.xls", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_2020_1.xls", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_2020.xls_0.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos
dfs_2020 = []
for url, delito in urls_2020:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2020.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2020 = pd.concat(dfs_2020, ignore_index=True)

# Ordenar por MUNICIPIO (y opcionalmente tambi√©n por DEPARTAMENTO)
df_2020 = df_2020.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\nTotal final 2020: {df_2020.shape[0]} filas y {df_2020.shape[1]} columnas")
display(df_2020.head())

df_2020.isna().sum()

df_2020[df_2020['AGRUPA_EDAD_PERSONA'].isna()][['AGRUPA_EDAD_PERSONA', 'TIPO_DELITO']]

"""2021"""

def cargar_delito(url, delito):
    # Probar varios posibles encabezados
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            df = df.dropna(how="all")

            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception:
            continue

    # Si lleg√≥ aqu√≠, fall√≥ con todas
    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    return pd.DataFrame()

# Diccionario de URLs y delitos 2021
urls_2021 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato_6.xls", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_11.xls", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_9.xls", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_9.xls", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202021.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_en_accidente_de_transito_9.xls", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_personas_9.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_residencias_5.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_5.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_motocicletas_5.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_9.xls", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_entidades_financieras_9.xls", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_5.xls", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_5.xls", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_pirateria_terrestre_9.xls", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_9.xls", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_9.xls", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_10.xls", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos
dfs_2021 = []
for url, delito in urls_2021:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2021.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2021 = pd.concat(dfs_2021, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2021 = df_2021.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\nTotal final 2021: {df_2021.shape[0]} filas y {df_2021.shape[1]} columnas")
display(df_2021.head())

# Filtrar solo Hurto de cabezas de ganado
df_hurto = df_2021[df_2021["TIPO_DELITO"] == "HURTO CABEZAS GANADO"]

# Contar los NaN por columna
nulos_hurto = df_hurto.isna().sum()

print(nulos_hurto)

"""2022"""

import pandas as pd

def cargar_delito(url, delito, debug=False):
    # Posibles filas de encabezado (var√≠a entre archivos)
    posibles_headers = [9, 10, 11, 12, 8, 7, 6, 13, 14, 15]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()

            # üîß Normalizar nombres de columnas
            df.columns = (
                df.columns.astype(str)
                .str.strip()
                .str.upper()
                .str.replace(" ", "_")
                .str.replace("*", "")
                .str.replace("/", "_")
            )

            if debug:
                print(f"\nüîç {delito} - Header {header_row}:")
                print(f"Columnas encontradas: {list(df.columns[:10])}")

            # üî§ Corregir errores comunes de nombres
            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_MEDIO": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA": "FECHA_HECHO",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "AGRUPA_EDAD_PER_SONA": "AGRUPA_EDAD_PERSONA",
                "MUNICICPIO": "MUNICIPIO",  # üëà Corregido
                "DEPARTAMENTO_": "DEPARTAMENTO",  # por si hay espacio o guion
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            # üîç Filtrar columnas v√°lidas
            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            columnas_presentes = [col for col in columnas_validas if col in df.columns]
            tiene_ubicacion = "DEPARTAMENTO" in columnas_presentes or "MUNICIPIO" in columnas_presentes
            tiene_suficientes = len(columnas_presentes) >= 3

            if not (tiene_ubicacion and tiene_suficientes):
                if debug:
                    print(f"   ‚ùå Solo tiene {len(columnas_presentes)} columnas v√°lidas: {columnas_presentes}")
                continue

            if debug:
                print(f"   ‚úÖ Tiene {len(columnas_presentes)} columnas v√°lidas: {columnas_presentes}")

            df = df[[col for col in columnas_validas if col in df.columns]]

            # üßπ Eliminar filas completamente vac√≠as
            df = df.dropna(how="all")

            # üßπ Eliminar filas donde las columnas de ubicaci√≥n est√©n vac√≠as
            if "DEPARTAMENTO" in df.columns and "MUNICIPIO" in df.columns:
                df = df.dropna(subset=["DEPARTAMENTO", "MUNICIPIO"], how="all")
            elif "DEPARTAMENTO" in df.columns:
                df = df.dropna(subset=["DEPARTAMENTO"])
            elif "MUNICIPIO" in df.columns:
                df = df.dropna(subset=["MUNICIPIO"])

            # üß± Cortar desde "TOTAL" hacia abajo si aparece
            for col in ["DEPARTAMENTO", "MUNICIPIO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    mask_total = df[col].astype(str).str.contains("TOTAL", na=False, case=False)
                    if mask_total.any():
                        primera_fila_total = mask_total.idxmax()
                        df = df.loc[:primera_fila_total - 1]
                        break

            # üßΩ Limpieza reforzada
            basura_regex = (
                "TOTAL|FUENTE|SIEDCO|Elaborado|Revisado|Autorizado|Ley 1098|"
                "Agrupaci√≥n referente|Contador|DUIN|POLIC√çA NACIONAL|"
                "DIRECCI√ìN|GRUPO DE INFORMACI√ìN|LESIONES|PER√çODO|MINISTERIO"
            )
            for col in ["DEPARTAMENTO", "MUNICIPIO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            # Eliminar filas vac√≠as o con solo espacios
            df = df[df.apply(lambda row: row.astype(str).str.strip().str.len().gt(0).any(), axis=1)]

            # Eliminar filas sin municipio
            if "MUNICIPIO" in df.columns:
                df = df[df["MUNICIPIO"].notna() & (df["MUNICIPIO"].astype(str).str.strip() != "")]

            # Convertir c√≥digo DANE a num√©rico
            if "CODIGO_DANE" in df.columns:
                df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

            # Agregar tipo de delito
            df["TIPO_DELITO"] = delito

            if not df.empty:
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df

        except Exception as e:
            if debug:
                print(f"‚ùå Error en header {header_row}: {str(e)}")
            continue

    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    if debug:
        print(f"   Intenta ejecutar: cargar_delito('{url}', '{delito}', debug=True)")
    return pd.DataFrame()

# Diccionario de URLs y delitos 2022
urls_2022 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato.xls_2.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_13.xls", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_11.xls", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_11.xls", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202022.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_en_accidente_de_transito_11.xls", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_personas_17.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_residencias_4.xls", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_4.xls", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_motocicletas_7.xls", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_11.xls", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_entidades_financieras_11.xls", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_7.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_pirateria_terrestre_11.xls", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_11.xls", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_11.xls", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_12.xls", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos
dfs_2022 = []
for url, delito in urls_2022:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2022.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2022 = pd.concat(dfs_2022, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2022 = df_2022.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\n Total final 2022: {df_2022.shape[0]} filas y {df_2022.shape[1]} columnas")
display(df_2022.head())

df_2022.isna().sum()

df_2022[df_2022['MUNICIPIO'].isna()][['MUNICIPIO', 'DEPARTAMENTO',"TIPO_DELITO"]]

"""2023"""

def cargar_delito(url, delito):
    # Probar varios posibles encabezados
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            df = df.dropna(how="all")

            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception:
            continue

    # Si lleg√≥ aqu√≠, fall√≥ con todas
    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    return pd.DataFrame()

# Diccionario de URLs y delitos 2023
urls_2023 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20cabezas%20de%20ganado.._0.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenzas..xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos%20sexuales.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_11.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidio%20intencional_0.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios%20en%20accidente%20de%20transito....xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20a%20personas.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20a%20residencias....xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20automotores....xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20a%20motocicletas....xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20a%20comercio..._0.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20entidades%20financieras.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones%20en%20accidente%20de%20transito....xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones%20personales..._0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20pirateria%20terrestre_1.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro..._0.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_4.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia%20intrafamiliar....xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos
dfs_2023 = []
for url, delito in urls_2023:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2023.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2023 = pd.concat(dfs_2023, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2023 = df_2023.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\n Total final 2023: {df_2023.shape[0]} filas y {df_2023.shape[1]} columnas")
display(df_2023.head())

df_2023[df_2023['MUNICIPIO'].isna()][['MUNICIPIO', 'DEPARTAMENTO',"TIPO_DELITO"]]

"""2024"""

def cargar_delito(url, delito):
    # Probar varios posibles encabezados
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            df = df.dropna(how="all")

            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception:
            continue

    # Si lleg√≥ aqu√≠, fall√≥ con todas
    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    return pd.DataFrame()


    # ------------------------
# BASES 2024
# ------------------------
urls_2024 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20cabezas%20de%20ganado2024_0.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Amenazas2024_0.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Delitos%20sexuales2024_0.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Extorsi%C3%B3n2024_0.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional2024_0.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidios%20en%20accidente%20de%20tr%C3%A1nsito2024_0.xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20personas2024_0.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20residencias2024_0.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20automotores2024_0.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20motocicletas2024_0.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20comercio2024_0.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20entidades%20Financieras2024_0.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Lesiones%20en%20accidente%20de%20tr%C3%A1nsito2024_2.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Lesiones%20personales2024_0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20pirater%C3%ADa%20terrestre2024_0.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Secuestro2024_0.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Terrorismo2024_0.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Violencia%20intrafamiliar2024_0.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos 2024
dfs_2024 = []
for url, delito in urls_2024:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2024.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2024 = pd.concat(dfs_2024, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2024 = df_2024.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\n Total final 2024: {df_2024.shape[0]} filas y {df_2024.shape[1]} columnas")
display(df_2024.head())

df_2024[df_2024['MUNICIPIO'].isna()][['MUNICIPIO', 'DEPARTAMENTO',"TIPO_DELITO"]]

"""2025"""

def cargar_delito(url, delito):
    # Probar varios posibles encabezados
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            df = df.dropna(how="all")

            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception:
            continue

    # Si lleg√≥ aqu√≠, fall√≥ con todas
    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    return pd.DataFrame()


    # ------------------------
# BASES 2025
# ------------------------
urls_2025 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20cabezas%20de%20ganado_5.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Amenazas_6.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Delitos%20sexuales_6.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Extorsi%C3%B3n_6.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional_3.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidios%20en%20accidente%20de%20tr%C3%A1nsito_4.xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20personas_7.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20residencias_6.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20automotores_3.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20motocicletas_3.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20comercio_5.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20entidades%20Financieras_6.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Lesiones%20en%20accidente%20de%20tr%C3%A1nsito_4.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Lesiones%20personales_5.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20pirater%C3%ADa%20terrestre_3.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Secuestro_5.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Terrorismo_5.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Violencia%20intrafamiliar_5.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos 2025
dfs_2025 = []
for url, delito in urls_2025:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2025.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2025 = pd.concat(dfs_2025, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2025 = df_2025.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\n Total final 2025: {df_2025.shape[0]} filas y {df_2025.shape[1]} columnas")
display(df_2025.head())

df_2025[df_2025['MUNICIPIO'].isna()][['MUNICIPIO', 'DEPARTAMENTO',"TIPO_DELITO"]]

"""Poblacion Y DAVIPOLA"""

import pandas as pd
import requests
import numpy as np

# --------------------------
# URLs de insumos externos
# --------------------------
url_poblacion = "https://www.dane.gov.co/files/censo2018/proyecciones-de-poblacion/Municipal/PPED-AreaSexoEdadMun-2018-2042_VP.xlsx"
api_url_divipola = "https://www.datos.gov.co/resource/gdxc-w37w.json?$limit=2000"

# Cargar DIVIPOLA desde la API de datos abiertos
divipola = pd.read_json(api_url_divipola)

# Mostrar las columnas originales
print("üßê Columnas originales en DIVIPOLA:")
print(divipola.columns.tolist())

# (Opcional) ver las primeras filas
display(divipola.head())

# Cargar DIVIPOLA desde la API de datos abiertos
divipola = pd.read_json(api_url_divipola)

# üî§ Normalizar texto
divipola = divipola.rename(columns={
    "cod_dpto": "CODIGO_DEPARTAMENTO",
    "dpto": "DEPARTAMENTO",
    "cod_mpio": "CODIGO_MUNICIPIO",
    "nom_mpio": "MUNICIPIO",
    "tipo_municipio": "TIPO_MUNICIPIO",
    "longitud": "LONGITUD",
    "latitud": "LATITUD"
})

# Pasar texto a may√∫sculas y limpiar espacios
divipola["DEPARTAMENTO"] = divipola["DEPARTAMENTO"].astype(str).str.upper().str.strip()
divipola["MUNICIPIO"] = divipola["MUNICIPIO"].astype(str).str.upper().str.strip()
divipola["TIPO_MUNICIPIO"] = divipola["TIPO_MUNICIPIO"].astype(str).str.upper().str.strip()

# Convertir c√≥digos a num√©ricos
divipola["CODIGO_DEPARTAMENTO"] = pd.to_numeric(divipola["CODIGO_DEPARTAMENTO"], errors="coerce")
divipola["CODIGO_MUNICIPIO"] = pd.to_numeric(divipola["CODIGO_MUNICIPIO"], errors="coerce")

print("‚úÖ DIVIPOLA lista:")
print(divipola.head())
print(f"Total: {divipola.shape[0]} filas y {divipola.shape[1]} columnas")

# ========================================
# 1. CARGAR Y PROCESAR DIVIPOLA
# ========================================
print("üì• Descargando DIVIPOLA...")
try:
    response = requests.get(api_url_divipola)
    response.raise_for_status() # Raise an exception for bad status codes
    divipola = pd.DataFrame(response.json())

    # Normalizar nombres de columnas to uppercase immediately
    divipola.columns = divipola.columns.str.upper().str.strip()

    # Asegurar que existan las columnas necesarias and rename if necessary
    columnas_divipola_map = {
        "COD_DPTO": "CODIGO_DEPARTAMENTO",
        "DPTO": "DEPARTAMENTO",
        "COD_MPIO": "CODIGO_MUNICIPIO",
        "NOM_MPIO": "MUNICIPIO",
        "TIPO_MUNICIPIO": "TIPO_MUNICIPIO",
        "LONGITUD": "LONGITUD",
        "LATITUD": "LATITUD",
        "C_DIGO_DANE_DEL_MUNICIPIO": "CODIGO_DANE" # Add this mapping if it exists in the data
    }

    # Rename columns using the map where keys are the uppercase original names
    divipola = divipola.rename(columns={k: v for k, v in columnas_divipola_map.items() if k in divipola.columns})


    # Convertir todo a may√∫sculas y limpiar espacios for relevant columns
    for col in ['DEPARTAMENTO', 'MUNICIPIO', 'TIPO_MUNICIPIO']:
        if col in divipola.columns:
             divipola[col] = divipola[col].astype(str).str.upper().str.strip()


    # Crear CODIGO_DANE completo (concatenar c√≥digo departamento + municipio)
    # Assuming CODIGO_DEPARTAMENTO and CODIGO_MUNICIPIO exist after renaming
    if 'CODIGO_DEPARTAMENTO' in divipola.columns and 'CODIGO_MUNICIPIO' in divipola.columns:
        # Ensure they are strings before concatenating, pad with leading zeros
        divipola['CODIGO_DANE_FULL'] = divipola['CODIGO_DEPARTAMENTO'].astype(str).str.zfill(2) + \
                                       divipola['CODIGO_MUNICIPIO'].astype(str).str.zfill(3)
        # Convert the combined DANE code to numeric, coercing errors
        divipola['CODIGO_DANE_FULL'] = pd.to_numeric(divipola['CODIGO_DANE_FULL'], errors='coerce')
    elif 'CODIGO_DANE' in divipola.columns:
         # If a CODIGO_DANE column already exists and was renamed, use that
         divipola['CODIGO_DANE_FULL'] = pd.to_numeric(divipola['CODIGO_DANE'], errors='coerce')
         print("Note: Using existing 'CODIGO_DANE' column from source data.")
    else:
         print("Warning: Could not create 'CODIGO_DANE_FULL' as required columns are missing.")
         divipola['CODIGO_DANE_FULL'] = np.nan # Add the column anyway with NaNs


    print(f"‚úÖ DIVIPOLA cargada: {divipola.shape[0]} filas y {divipola.shape[1]} columnas")
    print("Columnas DIVIPOLA:", divipola.columns.tolist())
    print("\nPrimeras filas de DIVIPOLA:")
    display(divipola.head())

except requests.exceptions.RequestException as e:
    print(f"‚ùå Error al descargar DIVIPOLA: {e}")
    divipola = pd.DataFrame() # Ensure divipola is an empty DataFrame on error
except Exception as e:
    print(f"‚ùå Error al procesar DIVIPOLA: {e}")
    divipola = pd.DataFrame() # Ensure divipola is an empty DataFrame on error

# ========================================
# 2. CARGAR Y PROCESAR POBLACI√ìN
# ========================================
print("\nüì• Descargando datos de poblaci√≥n...")
# Use header=7 (row 8) and the specified sheet name
pob = pd.read_excel(url_poblacion, sheet_name='PobMunicipalx√ÅreaSexoEdad', header=7)

# Normalizar nombres de columnas
pob.columns = pob.columns.str.upper().str.strip().str.replace(' ', '_').str.replace('√Å', 'A').str.replace(".", "", regex=False)

# Explicitly select the required columns
columnas_requeridas = ['DP', 'DPNOM', 'MPIO', 'DPMP', 'A√ëO', '√ÅREA_GEOGR√ÅFICA', 'TOTAL']

# Filter for columns that actually exist after reading and initial renaming
cols_existentes = [col for col in columnas_requeridas if col in pob.columns]
pob = pob[cols_existentes].copy()

print(f"Columnas seleccionadas para procesamiento: {pob.columns.tolist()}")

# Renombrar para estandarizar
renombrar_pob = {
    'DP': 'CODIGO_DEPARTAMENTO',
    'DPNOM': 'DEPARTAMENTO',
    'MPIO': 'CODIGO_MUNICIPIO', # Assuming MPIO is code based on previous analysis
    'DPMP': 'MUNICIPIO', # Assuming DPMP is name based on previous analysis
    'A√ëO': 'ANIO',
    '√ÅREA_GEOGR√ÅFICA': 'AREA_GEOGRAFICA',
    'TOTAL': 'POBLACION_TOTAL' # This 'TOTAL' column is the total population for the row's breakdown
}

# Apply renaming only if the original column exists
pob = pob.rename(columns={k: v for k, v in renombrar_pob.items() if k in pob.columns})

# Ensure 'ANIO' column is numeric before filtering
if 'ANIO' in pob.columns:
    pob['ANIO'] = pd.to_numeric(pob['ANIO'], errors='coerce')
    # Filter years 2018-2025
    pob = pob[(pob['ANIO'] >= 2018) & (pob['ANIO'] <= 2025)].copy()
    print(f"‚úÖ Poblaci√≥n filtrada por a√±os (2018-2025): {pob.shape[0]} filas")
else:
    print("‚ö†Ô∏è 'ANIO' column not found after renaming. Skipping year filtering.")


# Filter only the TOTAL of √ÅREA_GEOGR√ÅFICA (excluding Cabecera and Rural)
if 'AREA_GEOGRAFICA' in pob.columns:
    pob = pob[pob['AREA_GEOGRAFICA'].astype(str).str.upper().str.strip() == 'TOTAL'].copy()
    print(f"‚úÖ Filtrado solo √°rea 'Total': {pob.shape[0]} filas")
else:
     print("‚ö†Ô∏è 'AREA_GEOGRAFICA' column not found. Cannot filter by area.")

# Ensure 'POBLACION_TOTAL' column exists and is numeric
if 'POBLACION_TOTAL' in pob.columns:
    pob['POBLACION_TOTAL'] = pd.to_numeric(pob['POBLACION_TOTAL'], errors='coerce')
else:
     print("‚ö†Ô∏è 'POBLACION_TOTAL' column not found. Cannot convert population to numeric.")


# Select final columns for merging
columnas_finales_pob = ['CODIGO_DEPARTAMENTO', 'CODIGO_MUNICIPIO', 'DEPARTAMENTO', 'MUNICIPIO', 'ANIO', 'POBLACION_TOTAL']
# Filter for columns that actually exist in the dataframe before selecting
cols_finales_existentes = [col for col in columnas_finales_pob if col in pob.columns]
pob_total = pob[cols_finales_existentes].copy()


# Drop duplicates and nulls based on key columns
subset_cols_dropna = [col for col in ['CODIGO_DEPARTAMENTO', 'CODIGO_MUNICIPIO', 'ANIO', 'POBLACION_TOTAL'] if col in pob_total.columns]
if subset_cols_dropna:
    pob_total = pob_total.dropna(subset=subset_cols_dropna)
    # Only drop duplicates if relevant columns exist
    subset_cols_drop_duplicates = [col for col in ['CODIGO_DEPARTAMENTO', 'CODIGO_MUNICIPIO', 'ANIO'] if col in pob_total.columns]
    if subset_cols_drop_duplicates:
         pob_total = pob_total.drop_duplicates(subset=subset_cols_drop_duplicates)
    else:
         print("‚ö†Ô∏è Cannot drop duplicates: Key columns missing in final population data.")
else:
    print("‚ö†Ô∏è Cannot drop nulls or duplicates: Key columns missing in final population data.")


print(f"‚úÖ Poblaci√≥n procesada para merge: {pob_total.shape[0]} filas")
print("\nPrimeras filas de poblaci√≥n procesada:")
display(pob_total.head())

# ============================================================
# üì¶ UNIFICAR BASES DE DELITOS 2018‚Äì2025 CON POBLACI√ìN Y DIVIPOLA (POR NOMBRE)
# ============================================================

import pandas as pd

# --- 1Ô∏è‚É£ Combinar todos los a√±os ---
dataframes_anuales = [df_2018, df_2019, df_2020, df_2021, df_2022, df_2023, df_2024, df_2025]
nombres = ["2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025"]

for df, anio in zip(dataframes_anuales, nombres):
    if "ANIO" not in df.columns:
        df["ANIO"] = int(anio)

# Concatenar todos los a√±os
df_delitos_todos = pd.concat(dataframes_anuales, ignore_index=True)

# Normalizar texto para asegurar coincidencia en los merges
for col in ["DEPARTAMENTO", "MUNICIPIO"]:
    if col in df_delitos_todos.columns:
        df_delitos_todos[col] = df_delitos_todos[col].astype(str).str.upper().str.strip()

print(f"\n‚úÖ Base unificada de delitos: {df_delitos_todos.shape[0]} filas y {df_delitos_todos.shape[1]} columnas")

# --- 2Ô∏è‚É£ Unir con DIVIPOLA por nombres ---
if 'divipola' in locals() and not divipola.empty:
    for col in ["DEPARTAMENTO", "MUNICIPIO"]:
        if col in divipola.columns:
            divipola[col] = divipola[col].astype(str).str.upper().str.strip()

    columnas_divipola = [c for c in ["DEPARTAMENTO", "MUNICIPIO", "TIPO_MUNICIPIO", "LONGITUD", "LATITUD"] if c in divipola.columns]
    df_delitos_todos = pd.merge(
        df_delitos_todos,
        divipola[columnas_divipola],
        on=["DEPARTAMENTO", "MUNICIPIO"],
        how="left"
    )
    print(f"‚úÖ Uni√≥n con DIVIPOLA completada. Filas finales: {df_delitos_todos.shape[0]}")
else:
    print("‚ö†Ô∏è No se encontr√≥ la base de DIVIPOLA o est√° vac√≠a. Se omite esta uni√≥n.")

# --- 3Ô∏è‚É£ Unir con POBLACI√ìN por nombres y a√±o ---
if 'pob_total' in locals() and not pob_total.empty:
    for col in ["DEPARTAMENTO", "MUNICIPIO"]:
        if col in pob_total.columns:
            pob_total[col] = pob_total[col].astype(str).str.upper().str.strip()

    columnas_pob = [c for c in ["DEPARTAMENTO", "MUNICIPIO", "ANIO", "POBLACION_TOTAL"] if c in pob_total.columns]
    df_final_con_poblacion = pd.merge(
        df_delitos_todos,
        pob_total[columnas_pob],
        on=["DEPARTAMENTO", "MUNICIPIO", "ANIO"],
        how="left"
    )
    print(f"‚úÖ Uni√≥n con poblaci√≥n completada. Filas finales: {df_final_con_poblacion.shape[0]}")
else:
    print("‚ö†Ô∏è No se encontr√≥ la base de poblaci√≥n o est√° vac√≠a. Se omite esta uni√≥n.")
    df_final_con_poblacion = df_delitos_todos.copy()

# --- 4Ô∏è‚É£ Calcular tasa de delitos por cada 100.000 habitantes ---
if "POBLACION_TOTAL" in df_final_con_poblacion.columns and "CANTIDAD" in df_final_con_poblacion.columns:
    df_final_con_poblacion["CANTIDAD"] = pd.to_numeric(df_final_con_poblacion["CANTIDAD"], errors="coerce")
    df_final_con_poblacion["POBLACION_TOTAL"] = pd.to_numeric(df_final_con_poblacion["POBLACION_TOTAL"], errors="coerce")
    df_final_con_poblacion["TASA_DELITO_100K"] = (
        df_final_con_poblacion["CANTIDAD"] / df_final_con_poblacion["POBLACION_TOTAL"] * 100000
    )
    print("‚úÖ Se calcul√≥ la tasa de delitos por cada 100.000 habitantes.")
else:
    print("‚ö†Ô∏è No se puede calcular la tasa: faltan columnas 'POBLACION_TOTAL' o 'CANTIDAD'.")

# --- 5Ô∏è‚É£ Guardar archivo final ---
ruta_guardado = "delitos_2018_2025_unificado.csv"
df_final_con_poblacion.to_csv(ruta_guardado, index=False, encoding="utf-8-sig")
print(f"üíæ Archivo guardado exitosamente en: {ruta_guardado}")

# Vista previa
display(df_final_con_poblacion.head(20))

# ============================================================
# üíæ EXPORTAR BASE FINAL COMPLETA A CSV (TODAS LAS COLUMNAS)
# ============================================================

# Nombre del archivo final
ruta_csv = "delitos_2018_2025_completo.csv"

# Guardar todo el DataFrame sin filtrar columnas
df_final_con_poblacion.to_csv(ruta_csv, index=False, encoding="utf-8-sig")

print(f"‚úÖ Archivo CSV exportado exitosamente con todas las columnas: {ruta_csv}")
print(f"üìä Total de filas: {df_final_con_poblacion.shape[0]}")
print(f"üìã Total de columnas: {df_final_con_poblacion.shape[1]}")

# Vista previa de las primeras filas
display(df_final_con_poblacion.head(10))

from google.colab import files

# Nombre del archivo
ruta_csv = "delitos_2018_2025_completo.csv"

# Guardar todas las columnas en CSV
df_final_con_poblacion.to_csv(ruta_csv, index=False, encoding="utf-8-sig")

# Descargar el archivo a tu equipo
files.download(ruta_csv)

"""# AN√ÅLISIS UNIVARIADO COMPLETO"""

# ============================================================
# üì• PARTE 1: INFORMACI√ìN GENERAL
# ============================================================

print("="*80)
print("üìä INFORMACI√ìN GENERAL DE LA BASE DE DATOS")
print("="*80)
print(f"\nüî¢ Dimensiones: {df.shape[0]:,} filas √ó {df.shape[1]} columnas")
print(f"üìÖ Per√≠odo: {df['ANIO'].min()} - {df['ANIO'].max()}")
print(f"üíæ Memoria: {df.memory_usage(deep=True).sum() / (1024**2):.2f} MB")

print(f"\nüìã Columnas disponibles:")
for i, col in enumerate(df.columns, 1):
    print(f"  {i:2d}. {col}")

# ============================================================
# üîç PARTE 2: CLASIFICACI√ìN DE VARIABLES
# ============================================================

print("\n" + "="*80)
print("üîç CLASIFICACI√ìN DE VARIABLES")
print("="*80)

vars_numericas = df.select_dtypes(include=[np.number]).columns.tolist()
vars_categoricas = df.select_dtypes(include=['object']).columns.tolist()

print(f"\nüìà Variables Num√©ricas ({len(vars_numericas)}):")
for var in vars_numericas:
    print(f"  ‚Ä¢ {var}")

print(f"\nüìù Variables Categ√≥ricas ({len(vars_categoricas)}):")
for var in vars_categoricas:
    print(f"  ‚Ä¢ {var}")

# ============================================================
# ‚ùì PARTE 3: AN√ÅLISIS DE VALORES NULOS
# ============================================================

print("\n" + "="*80)
print("‚ùì AN√ÅLISIS DE VALORES NULOS")
print("="*80)

nulos = df.isnull().sum()
nulos_pct = (nulos / len(df) * 100).round(2)
df_nulos = pd.DataFrame({
    'Variable': nulos.index,
    'Nulos': nulos.values,
    'Porcentaje': nulos_pct.values
})
df_nulos = df_nulos[df_nulos['Nulos'] > 0].sort_values('Nulos', ascending=False)

if not df_nulos.empty:
    print(df_nulos.to_string(index=False))

    # Gr√°fico de nulos
    plt.figure(figsize=(12, 6))
    bars = plt.barh(df_nulos['Variable'], df_nulos['Porcentaje'], color='#3182bd', alpha=0.8)
    plt.xlabel('Porcentaje de valores nulos (%)', fontsize=12, fontweight='bold')
    plt.title('üìä Porcentaje de Valores Nulos por Variable', fontsize=14, fontweight='bold', pad=15)
    plt.grid(axis='x', alpha=0.3)

    for i, (bar, val) in enumerate(zip(bars, df_nulos['Porcentaje'])):
        plt.text(val + 0.5, i, f'{val:.1f}%', va='center', fontsize=10, fontweight='bold')

    plt.tight_layout()
    plt.show()
else:
    print("‚úÖ ¬°No hay valores nulos en el dataset!")

# ============================================================
# üìä PARTE 4: ESTAD√çSTICAS DESCRIPTIVAS - VARIABLES NUM√âRICAS
# ============================================================

print("\n" + "="*80)
print("üìä ESTAD√çSTICAS DESCRIPTIVAS - VARIABLES NUM√âRICAS")
print("="*80)

vars_principales = ['CANTIDAD', 'POBLACION_TOTAL', 'TASA_DELITO_100K', 'ANIO']
vars_disponibles = [v for v in vars_principales if v in df.columns]

if vars_disponibles:
    desc = df[vars_disponibles].describe().T
    desc['IQR'] = desc['75%'] - desc['25%']
    desc['CV%'] = (desc['std'] / desc['mean'] * 100).round(2)
    desc['Nulos'] = df[vars_disponibles].isnull().sum().values
    print(desc.to_string())

# ============================================================
# üìà PARTE 5: HISTOGRAMAS - VARIABLES NUM√âRICAS
# ============================================================

print("\n" + "="*80)
print("üìà HISTOGRAMAS - DISTRIBUCI√ìN DE VARIABLES NUM√âRICAS")
print("="*80)

fig, axes = plt.subplots(2, 2, figsize=(16, 12))
fig.suptitle('üìä Distribuci√≥n de Variables Num√©ricas Principales',
             fontsize=18, fontweight='bold', y=0.995)

# 1. CANTIDAD
if 'CANTIDAD' in df.columns:
    ax = axes[0, 0]
    cantidad = df['CANTIDAD'].dropna()
    cantidad_filtrada = cantidad[cantidad <= cantidad.quantile(0.99)]

    ax.hist(cantidad_filtrada, bins=60, color='#3182bd', alpha=0.7, edgecolor='black', linewidth=0.5)
    ax.set_xlabel('Cantidad de delitos', fontsize=12, fontweight='bold')
    ax.set_ylabel('Frecuencia', fontsize=12, fontweight='bold')
    ax.set_title('Distribuci√≥n de CANTIDAD (sin outliers extremos)', fontsize=13, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')

    media = cantidad_filtrada.mean()
    mediana = cantidad_filtrada.median()
    ax.axvline(media, color='#d62728', linestyle='--', linewidth=2.5, label=f'Media: {media:.2f}')
    ax.axvline(mediana, color='#ff7f0e', linestyle='--', linewidth=2.5, label=f'Mediana: {mediana:.2f}')
    ax.legend(fontsize=10, loc='upper right')

# 2. POBLACION_TOTAL
if 'POBLACION_TOTAL' in df.columns:
    ax = axes[0, 1]
    poblacion = df['POBLACION_TOTAL'].dropna()

    ax.hist(poblacion, bins=60, color='#6baed6', alpha=0.7, edgecolor='black', linewidth=0.5)
    ax.set_xlabel('Poblaci√≥n Total', fontsize=12, fontweight='bold')
    ax.set_ylabel('Frecuencia', fontsize=12, fontweight='bold')
    ax.set_title('Distribuci√≥n de POBLACI√ìN TOTAL', fontsize=13, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')
    ax.ticklabel_format(style='plain', axis='x')

    media = poblacion.mean()
    ax.axvline(media, color='#d62728', linestyle='--', linewidth=2.5, label=f'Media: {media:,.0f}')
    ax.legend(fontsize=10)

# 3. TASA_DELITO_100K
if 'TASA_DELITO_100K' in df.columns:
    ax = axes[1, 0]
    tasa = df['TASA_DELITO_100K'].dropna()
    tasa_filtrada = tasa[tasa <= tasa.quantile(0.99)]

    ax.hist(tasa_filtrada, bins=60, color='#9ecae1', alpha=0.7, edgecolor='black', linewidth=0.5)
    ax.set_xlabel('Tasa por 100K habitantes', fontsize=12, fontweight='bold')
    ax.set_ylabel('Frecuencia', fontsize=12, fontweight='bold')
    ax.set_title('Distribuci√≥n de TASA DE DELITOS (por 100K hab)', fontsize=13, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')

    media = tasa_filtrada.mean()
    mediana = tasa_filtrada.median()
    ax.axvline(media, color='#d62728', linestyle='--', linewidth=2.5, label=f'Media: {media:.2f}')
    ax.axvline(mediana, color='#ff7f0e', linestyle='--', linewidth=2.5, label=f'Mediana: {mediana:.2f}')
    ax.legend(fontsize=10)

# 4. ANIO (Barras)
if 'ANIO' in df.columns:
    ax = axes[1, 1]
    anios_count = df['ANIO'].value_counts().sort_index()

    bars = ax.bar(anios_count.index, anios_count.values, color='#08519c',
                  alpha=0.8, edgecolor='black', linewidth=1.5)
    ax.set_xlabel('A√±o', fontsize=12, fontweight='bold')
    ax.set_ylabel('Cantidad de registros', fontsize=12, fontweight='bold')
    ax.set_title('Distribuci√≥n de REGISTROS POR A√ëO', fontsize=13, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')

    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height,
                f'{int(height):,}', ha='center', va='bottom', fontsize=10, fontweight='bold')

plt.tight_layout()
plt.show()

# ============================================================
# üì¶ PARTE 6: BOXPLOTS - DETECCI√ìN DE OUTLIERS
# ============================================================

print("\n" + "="*80)
print("üì¶ BOXPLOTS - DETECCI√ìN DE VALORES AT√çPICOS")
print("="*80)

fig, axes = plt.subplots(1, 3, figsize=(16, 6))
fig.suptitle('üì¶ Boxplots - Detecci√≥n de Valores At√≠picos',
             fontsize=16, fontweight='bold', y=0.98)

# Boxplot 1: CANTIDAD
if 'CANTIDAD' in df.columns:
    ax = axes[0]
    cantidad_box = df['CANTIDAD'].dropna()
    cantidad_box = cantidad_box[cantidad_box <= cantidad_box.quantile(0.95)]

    bp = ax.boxplot(cantidad_box, patch_artist=True, vert=True,
                    boxprops=dict(facecolor='#6baed6', alpha=0.7),
                    medianprops=dict(color='#d62728', linewidth=2.5),
                    whiskerprops=dict(linewidth=1.5),
                    capprops=dict(linewidth=1.5))
    ax.set_ylabel('Cantidad', fontsize=12, fontweight='bold')
    ax.set_title('CANTIDAD DE DELITOS', fontsize=13, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')

    q1, q2, q3 = cantidad_box.quantile([0.25, 0.5, 0.75])
    ax.text(1.15, q2, f'Q2: {q2:.1f}', fontsize=10, va='center')
    ax.text(1.15, q1, f'Q1: {q1:.1f}', fontsize=9, va='center')
    ax.text(1.15, q3, f'Q3: {q3:.1f}', fontsize=9, va='center')

# Boxplot 2: TASA_DELITO_100K
if 'TASA_DELITO_100K' in df.columns:
    ax = axes[1]
    tasa_box = df['TASA_DELITO_100K'].dropna()
    tasa_box = tasa_box[tasa_box <= tasa_box.quantile(0.95)]

    bp = ax.boxplot(tasa_box, patch_artist=True, vert=True,
                    boxprops=dict(facecolor='#3182bd', alpha=0.7),
                    medianprops=dict(color='#d62728', linewidth=2.5),
                    whiskerprops=dict(linewidth=1.5),
                    capprops=dict(linewidth=1.5))
    ax.set_ylabel('Tasa por 100K hab', fontsize=12, fontweight='bold')
    ax.set_title('TASA DE DELITOS', fontsize=13, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')

# Boxplot 3: POBLACION_TOTAL (log)
if 'POBLACION_TOTAL' in df.columns:
    ax = axes[2]
    pob_box = df['POBLACION_TOTAL'].dropna()
    pob_box = pob_box[pob_box > 0]

    bp = ax.boxplot(np.log10(pob_box), patch_artist=True, vert=True,
                    boxprops=dict(facecolor='#08519c', alpha=0.7),
                    medianprops=dict(color='#d62728', linewidth=2.5),
                    whiskerprops=dict(linewidth=1.5),
                    capprops=dict(linewidth=1.5))
    ax.set_ylabel('Log10(Poblaci√≥n)', fontsize=12, fontweight='bold')
    ax.set_title('POBLACI√ìN TOTAL (escala log)', fontsize=13, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')

plt.tight_layout()
plt.show()

# ============================================================
# üö® PARTE 7: AN√ÅLISIS DE TIPO DE DELITO
# ============================================================

print("\n" + "="*80)
print("üö® AN√ÅLISIS DE TIPO DE DELITO")
print("="*80)

if 'TIPO_DELITO' in df.columns:
    tipo_delito_freq = df['TIPO_DELITO'].value_counts()
    tipo_delito_pct = (tipo_delito_freq / len(df) * 100).round(2)

    df_delitos = pd.DataFrame({
        'Tipo de Delito': tipo_delito_freq.index,
        'Frecuencia': tipo_delito_freq.values,
        'Porcentaje': tipo_delito_pct.values,
        'Acumulado': tipo_delito_pct.cumsum().values
    })

    print(df_delitos.head(15).to_string(index=False))

    # Visualizaci√≥n
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))
    fig.suptitle('üö® An√°lisis de Tipos de Delito', fontsize=18, fontweight='bold')

    # Top 12 delitos - Barras horizontales
    top12 = tipo_delito_freq.head(12)
    colors = plt.cm.Blues(np.linspace(0.4, 0.95, len(top12)))

    bars = ax1.barh(range(len(top12)), top12.values, color=colors, edgecolor='black', linewidth=1)
    ax1.set_yticks(range(len(top12)))
    ax1.set_yticklabels(top12.index, fontsize=11)
    ax1.set_xlabel('Cantidad de registros', fontsize=12, fontweight='bold')
    ax1.set_title('Top 12 Tipos de Delito', fontsize=14, fontweight='bold')
    ax1.invert_yaxis()
    ax1.grid(axis='x', alpha=0.3, linestyle='--')

    for i, (bar, val) in enumerate(zip(bars, top12.values)):
        pct = tipo_delito_pct[top12.index[i]]
        ax1.text(val + max(top12.values)*0.02, i,
                f'{val:,} ({pct:.1f}%)', va='center', fontsize=10, fontweight='bold')

    # Gr√°fico de torta - Top 6 + Otros
    top6 = tipo_delito_freq.head(6)
    otros = tipo_delito_freq.iloc[6:].sum()

    sizes = list(top6.values) + [otros]
    labels = list(top6.index) + ['OTROS']
    colors_pie = ['#08519c', '#2171b5', '#4292c6', '#6baed6', '#9ecae1', '#c6dbef', '#deebf7']
    explode = [0.05, 0.02, 0, 0, 0, 0, 0]

    wedges, texts, autotexts = ax2.pie(sizes, labels=labels, autopct='%1.1f%%',
                                         colors=colors_pie, startangle=90, explode=explode,
                                         textprops={'fontsize': 10, 'weight': 'bold'})
    ax2.set_title('Distribuci√≥n Porcentual - Top 6 Delitos', fontsize=14, fontweight='bold')

    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontweight('bold')
        autotext.set_fontsize(11)

    plt.tight_layout()
    plt.show()

# ============================================================
# üó∫Ô∏è PARTE 8: AN√ÅLISIS DE DEPARTAMENTO
# ============================================================

print("\n" + "="*80)
print("üó∫Ô∏è AN√ÅLISIS DE DEPARTAMENTO")
print("="*80)

if 'DEPARTAMENTO' in df.columns:
    dept_freq = df['DEPARTAMENTO'].value_counts()
    dept_pct = (dept_freq / len(df) * 100).round(2)

    df_dept = pd.DataFrame({
        'Departamento': dept_freq.index,
        'Registros': dept_freq.values,
        'Porcentaje': dept_pct.values,
        'Acumulado': dept_pct.cumsum().values
    })

    print(df_dept.head(15).to_string(index=False))
    print(f"\nTotal de departamentos: {df['DEPARTAMENTO'].nunique()}")

    # Visualizaci√≥n
    fig, ax = plt.subplots(figsize=(16, 10))

    top20_dept = dept_freq.head(20)
    colors = plt.cm.Blues(np.linspace(0.3, 0.95, len(top20_dept)))

    bars = ax.barh(range(len(top20_dept)), top20_dept.values, color=colors,
                   edgecolor='black', linewidth=1.2)
    ax.set_yticks(range(len(top20_dept)))
    ax.set_yticklabels(top20_dept.index, fontsize=12)
    ax.set_xlabel('Cantidad de registros', fontsize=13, fontweight='bold')
    ax.set_title('üó∫Ô∏è Top 20 Departamentos con M√°s Registros de Delitos',
                fontsize=16, fontweight='bold', pad=20)
    ax.invert_yaxis()
    ax.grid(axis='x', alpha=0.3, linestyle='--')

    for i, (bar, val) in enumerate(zip(bars, top20_dept.values)):
        pct = dept_pct[top20_dept.index[i]]
        ax.text(val + max(top20_dept.values)*0.02, i,
                f'{val:,} ({pct:.1f}%)', va='center', fontsize=10, fontweight='bold')

    plt.tight_layout()
    plt.show()

# ============================================================
# üèôÔ∏è PARTE 9: AN√ÅLISIS DE MUNICIPIO
# ============================================================

print("\n" + "="*80)
print("üèôÔ∏è AN√ÅLISIS DE MUNICIPIO")
print("="*80)

if 'MUNICIPIO' in df.columns:
    mun_freq = df['MUNICIPIO'].value_counts()
    mun_pct = (mun_freq / len(df) * 100).round(2)

    df_mun = pd.DataFrame({
        'Municipio': mun_freq.index,
        'Registros': mun_freq.values,
        'Porcentaje': mun_pct.values
    })

    print(df_mun.head(25).to_string(index=False))
    print(f"\nTotal de municipios √∫nicos: {df['MUNICIPIO'].nunique():,}")

    # Visualizaci√≥n
    fig, ax = plt.subplots(figsize=(16, 12))

    top25_mun = mun_freq.head(25)
    colors = plt.cm.Blues(np.linspace(0.25, 0.95, len(top25_mun)))

    bars = ax.barh(range(len(top25_mun)), top25_mun.values, color=colors,
                   edgecolor='black', linewidth=1.2)
    ax.set_yticks(range(len(top25_mun)))
    ax.set_yticklabels(top25_mun.index, fontsize=11)
    ax.set_xlabel('Cantidad de registros', fontsize=13, fontweight='bold')
    ax.set_title('üèôÔ∏è Top 25 Municipios con M√°s Registros de Delitos',
                fontsize=16, fontweight='bold', pad=20)
    ax.invert_yaxis()
    ax.grid(axis='x', alpha=0.3, linestyle='--')

    for i, (bar, val) in enumerate(zip(bars, top25_mun.values)):
        pct = mun_pct[top25_mun.index[i]]
        ax.text(val + max(top25_mun.values)*0.02, i,
                f'{val:,} ({pct:.1f}%)', va='center', fontsize=9, fontweight='bold')

    plt.tight_layout()
    plt.show()

# ============================================================
# üî´ PARTE 10: AN√ÅLISIS DE ARMAS Y MEDIOS
# ============================================================

print("\n" + "="*80)
print("üî´ AN√ÅLISIS DE ARMAS Y MEDIOS")
print("="*80)

if 'ARMAS_MEDIOS' in df.columns:
    armas_freq = df['ARMAS_MEDIOS'].value_counts()
    armas_pct = (armas_freq / len(df) * 100).round(2)

    df_armas = pd.DataFrame({
        'Arma/Medio': armas_freq.index,
        'Frecuencia': armas_freq.values,
        'Porcentaje': armas_pct.values
    })

    print(df_armas.head(15).to_string(index=False))

    # Visualizaci√≥n
    fig, ax = plt.subplots(figsize=(16, 10))

    top15_armas = armas_freq.head(15)
    colors = plt.cm.Blues(np.linspace(0.3, 0.95, len(top15_armas)))

    bars = ax.barh(range(len(top15_armas)), top15_armas.values, color=colors,
                   edgecolor='black', linewidth=1.2)
    ax.set_yticks(range(len(top15_armas)))
    ax.set_yticklabels(top15_armas.index, fontsize=11)
    ax.set_xlabel('Cantidad de registros', fontsize=13, fontweight='bold')
    ax.set_title('üî´ Top 15 Armas/Medios Utilizados en Delitos',
                fontsize=16, fontweight='bold', pad=20)
    ax.invert_yaxis()
    ax.grid(axis='x', alpha=0.3, linestyle='--')

    for i, (bar, val) in enumerate(zip(bars, top15_armas.values)):
        pct = armas_pct[top15_armas.index[i]]
        ax.text(val + max(top15_armas.values)*0.02, i,
                f'{val:,} ({pct:.1f}%)', va='center', fontsize=10, fontweight='bold')

    plt.tight_layout()
    plt.show()

# ============================================================
# üë• PARTE 11: AN√ÅLISIS DE G√âNERO
# ============================================================

print("\n" + "="*80)
print("üë• AN√ÅLISIS DE G√âNERO")
print("="*80)

if 'GENERO' in df.columns:
    genero_freq = df['GENERO'].value_counts()
    genero_pct = (genero_freq / len(df) * 100).round(2)

    df_genero = pd.DataFrame({
        'G√©nero': genero_freq.index,
        'Frecuencia': genero_freq.values,
        'Porcentaje': genero_pct.values
    })

    print(df_genero.to_string(index=False))

    # Visualizaci√≥n
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7))
    fig.suptitle('üë• An√°lisis de G√©nero de las V√≠ctimas', fontsize=18, fontweight='bold')

    # Barras
    colors_genero = ['#08519c', '#6baed6', '#c6dbef'][:len(genero_freq)]
    bars = ax1.bar(genero_freq.index, genero_freq.values, color=colors_genero,
                   alpha=0.85, edgecolor='black', linewidth=2)
    ax1.set_ylabel('Cantidad de registros', fontsize=12, fontweight='bold')
    ax1.set_xlabel('G√©nero', fontsize=12, fontweight='bold')
    ax1.set_title('Distribuci√≥n por G√©nero', fontsize=14, fontweight='bold')
    ax1.grid(axis='y', alpha=0.3, linestyle='--')

    for bar, val, pct in zip(bars, genero_freq.values, genero_pct.values):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height,
                f'{int(val):,}\n({pct:.1f}%)', ha='center', va='bottom',
                fontsize=11, fontweight='bold')

    # Torta
    wedges, texts, autotexts = ax2.pie(genero_freq.values, labels=genero_freq.index,
                                         autopct='%1.1f%%', colors=colors_genero,
                                         startangle=90, explode=[0.05]*len(genero_freq),
                                         textprops={'fontsize': 12, 'weight': 'bold'})
    ax2.set_title('Proporci√≥n por G√©nero', fontsize=14, fontweight='bold')

    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontweight('bold')
        autotext.set_fontsize(13)

    plt.tight_layout()
    plt.show()

# ============================================================
# üë∂ PARTE 12: AN√ÅLISIS DE GRUPO DE EDAD
# ============================================================

print("\n" + "="*80)
print("üë∂ AN√ÅLISIS DE GRUPO DE EDAD")
print("="*80)

if 'AGRUPA_EDAD_PERSONA' in df.columns:
    edad_freq = df['AGRUPA_EDAD_PERSONA'].value_counts()
    edad_pct = (edad_freq / len(df) * 100).round(2)

    df_edad = pd.DataFrame({
        'Grupo de Edad': edad_freq.index,
        'Frecuencia': edad_freq.values,
        'Porcentaje': edad_pct.values
    })

    print(df_edad.to_string(index=False))

    # Visualizaci√≥n
    fig, ax = plt.subplots(figsize=(14, 7))

    colors_edad = plt.cm.Blues(np.linspace(0.3, 0.95, len(edad_freq)))
    bars = ax.bar(range(len(edad_freq)), edad_freq.values, color=colors_edad,
                  alpha=0.85, edgecolor='black', linewidth=1.5)
    ax.set_xticks(range(len(edad_freq)))
    ax.set_xticklabels(edad_freq.index, rotation=45, ha='right', fontsize=11)
    ax.set_ylabel('Cantidad de registros', fontsize=12, fontweight='bold')
    ax.set_title('üë∂ Distribuci√≥n por Grupo de Edad de las V√≠ctimas',
                fontsize=16, fontweight='bold', pad=20)
    ax.grid(axis='y', alpha=0.3, linestyle='--')

    for i, (bar, val, pct) in enumerate(zip(bars, edad_freq.values, edad_pct.values)):
        ax.text(bar.get_x() + bar.get_width()/2., val,
                f'{val:,}\n({pct:.1f}%)', ha='center', va='bottom',
                fontsize=10, fontweight='bold')

    plt.tight_layout()
    plt.show()

# ============================================================
# üìÖ PARTE 13: EVOLUCI√ìN TEMPORAL
# ============================================================

print("\n" + "="*80)
print("üìÖ EVOLUCI√ìN TEMPORAL DE DELITOS")
print("="*80)

if 'ANIO' in df.columns and 'TIPO_DELITO' in df.columns:
    # Delitos totales por a√±o
    delitos_anio = df.groupby('ANIO').size()

    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(16, 12))
    fig.suptitle('üìÖ Evoluci√≥n Temporal de Delitos (2018-2025)',
                 fontsize=18, fontweight='bold')

    # Total general
    ax1.plot(delitos_anio.index, delitos_anio.values, marker='o', linewidth=3,
             markersize=12, color='#08519c', markerfacecolor='#6baed6',
             markeredgewidth=2, markeredgecolor='#08519c')
    ax1.fill_between(delitos_anio.index, delitos_anio.values, alpha=0.3, color='#6baed6')
    ax1.set_xlabel('A√±o', fontsize=13, fontweight='bold')
    ax1.set_ylabel('Cantidad de registros', fontsize=13, fontweight='bold')
    ax1.set_title('Total de Registros de Delitos por A√±o', fontsize=14, fontweight='bold')
    ax1.grid(True, alpha=0.3, linestyle='--')
    ax1.set_xticks(delitos_anio.index)

    # Agregar valores en los puntos
    for x, y in zip(delitos_anio.index, delitos_anio.values):
        ax1.text(x, y + max(delitos_anio.values)*0.02, f'{y:,}',
                ha='center', va='bottom', fontsize=11, fontweight='bold')

    # Calcular variaci√≥n porcentual
    variacion = delitos_anio.pct_change() * 100
    for i in range(1, len(delitos_anio)):
        var = variacion.iloc[i]
        color_var = '#2ca02c' if var < 0 else '#d62728'
        ax1.text(delitos_anio.index[i], delitos_anio.values[i] - max(delitos_anio.values)*0.05,
                f'{var:+.1f}%', ha='center', fontsize=9, color=color_var, fontweight='bold')

    # Top 5 delitos por a√±o
    top5_delitos = df['TIPO_DELITO'].value_counts().head(5).index
    evolucion_top5 = df[df['TIPO_DELITO'].isin(top5_delitos)].groupby(['ANIO', 'TIPO_DELITO']).size().unstack(fill_value=0)

    colors_top5 = ['#08519c', '#2171b5', '#4292c6', '#6baed6', '#9ecae1']
    for i, delito in enumerate(evolucion_top5.columns):
        ax2.plot(evolucion_top5.index, evolucion_top5[delito],
                marker='o', linewidth=2.5, markersize=8, label=delito,
                color=colors_top5[i % len(colors_top5)])

    ax2.set_xlabel('A√±o', fontsize=13, fontweight='bold')
    ax2.set_ylabel('Cantidad de registros', fontsize=13, fontweight='bold')
    ax2.set_title('Evoluci√≥n de Top 5 Delitos M√°s Frecuentes', fontsize=14, fontweight='bold')
    ax2.legend(loc='best', fontsize=10, framealpha=0.9)
    ax2.grid(True, alpha=0.3, linestyle='--')
    ax2.set_xticks(evolucion_top5.index)

    plt.tight_layout()
    plt.show()

    # Tabla de evoluci√≥n
    print("\nüìä Evoluci√≥n anual de delitos:")
    tabla_evolucion = pd.DataFrame({
        'A√±o': delitos_anio.index,
        'Total Registros': delitos_anio.values,
        'Variaci√≥n %': ['---'] + [f'{v:+.2f}%' for v in variacion.values[1:]]
    })
    print(tabla_evolucion.to_string(index=False))

# ============================================================
# üéØ PARTE 14: PERFIL DE DELITOS - AN√ÅLISIS COMBINADO
# ============================================================

print("\n" + "="*80)
print("üéØ PERFIL DE DELITOS - AN√ÅLISIS COMBINADO")
print("="*80)

# Perfil 1: Delitos por G√©nero y Edad
if 'GENERO' in df.columns and 'AGRUPA_EDAD_PERSONA' in df.columns:
    print("\nüë• Perfil por G√©nero y Edad:")
    perfil_genero_edad = pd.crosstab(df['GENERO'], df['AGRUPA_EDAD_PERSONA'], margins=True)
    print(perfil_genero_edad)

    # Visualizaci√≥n
    fig, ax = plt.subplots(figsize=(14, 7))
    perfil_genero_edad_pct = pd.crosstab(df['GENERO'], df['AGRUPA_EDAD_PERSONA'], normalize='index') * 100
    perfil_genero_edad_pct = perfil_genero_edad_pct.fillna(0)

    perfil_genero_edad_pct.T.plot(kind='bar', ax=ax, color=['#08519c', '#6baed6', '#c6dbef'],
                                   alpha=0.85, edgecolor='black', linewidth=1.5)
    ax.set_xlabel('Grupo de Edad', fontsize=12, fontweight='bold')
    ax.set_ylabel('Porcentaje', fontsize=12, fontweight='bold')
    ax.set_title('üë• Distribuci√≥n Porcentual de Delitos por G√©nero y Edad',
                fontsize=15, fontweight='bold', pad=15)
    ax.legend(title='G√©nero', fontsize=11, title_fontsize=12)
    ax.grid(axis='y', alpha=0.3, linestyle='--')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

# Perfil 2: Top delitos por departamento
if 'DEPARTAMENTO' in df.columns and 'TIPO_DELITO' in df.columns:
    print("\nüó∫Ô∏è Top 3 Delitos por Departamento (Top 10 departamentos):")
    top10_dept = df['DEPARTAMENTO'].value_counts().head(10).index

    for dept in top10_dept:
        df_dept = df[df['DEPARTAMENTO'] == dept]
        top3_delitos = df_dept['TIPO_DELITO'].value_counts().head(3)
        print(f"\n{dept}:")
        for i, (delito, cantidad) in enumerate(top3_delitos.items(), 1):
            pct = (cantidad / len(df_dept) * 100)
            print(f"  {i}. {delito}: {cantidad:,} ({pct:.1f}%)")

# Perfil 3: Armas m√°s usadas por tipo de delito
if 'TIPO_DELITO' in df.columns and 'ARMAS_MEDIOS' in df.columns:
    print("\nüî´ Arma m√°s usada por tipo de delito (Top 10 delitos):")
    top10_delitos = df['TIPO_DELITO'].value_counts().head(10).index

    armas_por_delito = []
    for delito in top10_delitos:
        df_delito = df[df['TIPO_DELITO'] == delito]
        arma_mas_usada = df_delito['ARMAS_MEDIOS'].value_counts().head(1)
        if not arma_mas_usada.empty:
            armas_por_delito.append({
                'Delito': delito,
                'Arma m√°s usada': arma_mas_usada.index[0],
                'Cantidad': arma_mas_usada.values[0],
                'Porcentaje': f"{(arma_mas_usada.values[0] / len(df_delito) * 100):.1f}%"
            })

    df_armas_delito = pd.DataFrame(armas_por_delito)
    print(df_armas_delito.to_string(index=False))

# ============================================================
# üìä PARTE 15: RESUMEN EJECUTIVO
# ============================================================

print("\n" + "="*80)
print("üìä RESUMEN EJECUTIVO DEL AN√ÅLISIS UNIVARIADO")
print("="*80)

print(f"\nüî¢ DATOS GENERALES:")
print(f"  ‚Ä¢ Total de registros: {len(df):,}")
print(f"  ‚Ä¢ Per√≠odo analizado: {df['ANIO'].min()} - {df['ANIO'].max()}")
print(f"  ‚Ä¢ A√±os completos: {df['ANIO'].nunique()}")

if 'TIPO_DELITO' in df.columns:
    print(f"\nüö® DELITOS:")
    print(f"  ‚Ä¢ Tipos de delitos: {df['TIPO_DELITO'].nunique()}")
    delito_principal = df['TIPO_DELITO'].value_counts().index[0]
    cant_principal = df['TIPO_DELITO'].value_counts().values[0]
    pct_principal = (cant_principal / len(df) * 100)
    print(f"  ‚Ä¢ Delito m√°s frecuente: {delito_principal}")
    print(f"  ‚Ä¢ Registros del principal: {cant_principal:,} ({pct_principal:.1f}%)")

if 'DEPARTAMENTO' in df.columns:
    print(f"\nüó∫Ô∏è UBICACI√ìN GEOGR√ÅFICA:")
    print(f"  ‚Ä¢ Departamentos: {df['DEPARTAMENTO'].nunique()}")
    dept_principal = df['DEPARTAMENTO'].value_counts().index[0]
    cant_dept = df['DEPARTAMENTO'].value_counts().values[0]
    pct_dept = (cant_dept / len(df) * 100)
    print(f"  ‚Ä¢ Departamento con m√°s registros: {dept_principal}")
    print(f"  ‚Ä¢ Registros: {cant_dept:,} ({pct_dept:.1f}%)")

if 'MUNICIPIO' in df.columns:
    print(f"  ‚Ä¢ Municipios: {df['MUNICIPIO'].nunique()}")
    mun_principal = df['MUNICIPIO'].value_counts().index[0]
    cant_mun = df['MUNICIPIO'].value_counts().values[0]
    pct_mun = (cant_mun / len(df) * 100)
    print(f"  ‚Ä¢ Municipio con m√°s registros: {mun_principal}")
    print(f"  ‚Ä¢ Registros: {cant_mun:,} ({pct_mun:.1f}%)")

if 'GENERO' in df.columns:
    print(f"\nüë• PERFIL DE V√çCTIMAS:")
    genero_principal = df['GENERO'].value_counts().index[0]
    cant_genero = df['GENERO'].value_counts().values[0]
    pct_genero = (cant_genero / len(df) * 100)
    print(f"  ‚Ä¢ G√©nero m√°s afectado: {genero_principal}")
    print(f"  ‚Ä¢ Registros: {cant_genero:,} ({pct_genero:.1f}%)")

if 'AGRUPA_EDAD_PERSONA' in df.columns:
    edad_principal = df['AGRUPA_EDAD_PERSONA'].value_counts().index[0]
    cant_edad = df['AGRUPA_EDAD_PERSONA'].value_counts().values[0]
    pct_edad = (cant_edad / len(df) * 100)
    print(f"  ‚Ä¢ Grupo de edad m√°s afectado: {edad_principal}")
    print(f"  ‚Ä¢ Registros: {cant_edad:,} ({pct_edad:.1f}%)")

if 'ARMAS_MEDIOS' in df.columns:
    print(f"\nüî´ ARMAS Y MEDIOS:")
    arma_principal = df['ARMAS_MEDIOS'].value_counts().index[0]
    cant_arma = df['ARMAS_MEDIOS'].value_counts().values[0]
    pct_arma = (cant_arma / len(df) * 100)
    print(f"  ‚Ä¢ Arma/medio m√°s usado: {arma_principal}")
    print(f"  ‚Ä¢ Registros: {cant_arma:,} ({pct_arma:.1f}%)")

if 'CANTIDAD' in df.columns:
    print(f"\nüìà ESTAD√çSTICAS DE CANTIDAD:")
    print(f"  ‚Ä¢ Promedio de delitos por registro: {df['CANTIDAD'].mean():.2f}")
    print(f"  ‚Ä¢ Mediana: {df['CANTIDAD'].median():.2f}")
    print(f"  ‚Ä¢ Total de delitos: {df['CANTIDAD'].sum():,.0f}")

if 'TASA_DELITO_100K' in df.columns:
    tasa_valida = df['TASA_DELITO_100K'].dropna()
    if len(tasa_valida) > 0:
        print(f"\nüìä TASA DE DELITOS:")
        print(f"  ‚Ä¢ Tasa promedio: {tasa_valida.mean():.2f} por 100K hab")
        print(f"  ‚Ä¢ Tasa mediana: {tasa_valida.median():.2f} por 100K hab")
        print(f"  ‚Ä¢ Tasa m√°xima: {tasa_valida.max():.2f} por 100K hab")

print("\n" + "="*80)
print("‚úÖ AN√ÅLISIS UNIVARIADO COMPLETADO EXITOSAMENTE")
print("="*80)

# ============================================================
# üìä PARTE 16: GR√ÅFICO RESUMEN FINAL
# ============================================================

print("\nüìä Generando gr√°fico resumen final...")

fig = plt.figure(figsize=(18, 12))
gs = fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)

fig.suptitle('üìä DASHBOARD RESUMEN - AN√ÅLISIS UNIVARIADO DE DELITOS EN COLOMBIA (2018-2025)',
             fontsize=20, fontweight='bold', y=0.98)

# 1. Evoluci√≥n temporal (grande)
if 'ANIO' in df.columns:
    ax1 = fig.add_subplot(gs[0, :])
    delitos_anio = df.groupby('ANIO').size()
    ax1.plot(delitos_anio.index, delitos_anio.values, marker='o', linewidth=3.5,
             markersize=14, color='#08519c', markerfacecolor='#6baed6',
             markeredgewidth=2.5, markeredgecolor='#08519c')
    ax1.fill_between(delitos_anio.index, delitos_anio.values, alpha=0.3, color='#6baed6')
    ax1.set_title('Evoluci√≥n Temporal de Delitos', fontsize=14, fontweight='bold', pad=10)
    ax1.set_xlabel('A√±o', fontsize=11, fontweight='bold')
    ax1.set_ylabel('Registros', fontsize=11, fontweight='bold')
    ax1.grid(True, alpha=0.3, linestyle='--')
    for x, y in zip(delitos_anio.index, delitos_anio.values):
        ax1.text(x, y, f'{y:,}', ha='center', va='bottom', fontsize=10, fontweight='bold')

# 2. Top 8 delitos
if 'TIPO_DELITO' in df.columns:
    ax2 = fig.add_subplot(gs[1, 0])
    top8_delitos = df['TIPO_DELITO'].value_counts().head(8)
    colors = plt.cm.Blues(np.linspace(0.4, 0.95, len(top8_delitos)))
    ax2.barh(range(len(top8_delitos)), top8_delitos.values, color=colors, edgecolor='black')
    ax2.set_yticks(range(len(top8_delitos)))
    ax2.set_yticklabels([d[:30] + '...' if len(d) > 30 else d for d in top8_delitos.index], fontsize=9)
    ax2.set_title('Top 8 Delitos', fontsize=12, fontweight='bold')
    ax2.invert_yaxis()
    ax2.grid(axis='x', alpha=0.3)

# 3. Top 8 departamentos
if 'DEPARTAMENTO' in df.columns:
    ax3 = fig.add_subplot(gs[1, 1])
    top8_dept = df['DEPARTAMENTO'].value_counts().head(8)
    colors = plt.cm.Blues(np.linspace(0.4, 0.95, len(top8_dept)))
    ax3.barh(range(len(top8_dept)), top8_dept.values, color=colors, edgecolor='black')
    ax3.set_yticks(range(len(top8_dept)))
    ax3.set_yticklabels(top8_dept.index, fontsize=9)
    ax3.set_title('Top 8 Departamentos', fontsize=12, fontweight='bold')
    ax3.invert_yaxis()
    ax3.grid(axis='x', alpha=0.3)

# 4. G√©nero (torta)
if 'GENERO' in df.columns:
    ax4 = fig.add_subplot(gs[1, 2])
    genero_freq = df['GENERO'].value_counts()
    colors_genero = ['#08519c', '#6baed6', '#c6dbef'][:len(genero_freq)]
    wedges, texts, autotexts = ax4.pie(genero_freq.values, labels=genero_freq.index,
                                        autopct='%1.1f%%', colors=colors_genero, startangle=90)
    ax4.set_title('Distribuci√≥n por G√©nero', fontsize=12, fontweight='bold')
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontweight('bold')

# 5. Top 6 armas
if 'ARMAS_MEDIOS' in df.columns:
    ax5 = fig.add_subplot(gs[2, 0])
    top6_armas = df['ARMAS_MEDIOS'].value_counts().head(6)
    colors = plt.cm.Blues(np.linspace(0.4, 0.95, len(top6_armas)))
    bars = ax5.bar(range(len(top6_armas)), top6_armas.values, color=colors,
                   edgecolor='black', alpha=0.8)
    ax5.set_xticks(range(len(top6_armas)))
    ax5.set_xticklabels([a[:15] + '...' if len(a) > 15 else a for a in top6_armas.index],
                        rotation=45, ha='right', fontsize=8)
    ax5.set_title('Top 6 Armas/Medios', fontsize=12, fontweight='bold')
    ax5.grid(axis='y', alpha=0.3)

# 6. Edad
if 'AGRUPA_EDAD_PERSONA' in df.columns:
    ax6 = fig.add_subplot(gs[2, 1])
    edad_freq = df['AGRUPA_EDAD_PERSONA'].value_counts()
    colors = plt.cm.Blues(np.linspace(0.4, 0.95, len(edad_freq)))
    bars = ax6.bar(range(len(edad_freq)), edad_freq.values, color=colors,
                   edgecolor='black', alpha=0.8)
    ax6.set_xticks(range(len(edad_freq)))
    ax6.set_xticklabels(edad_freq.index, rotation=45, ha='right', fontsize=8)
    ax6.set_title('Grupos de Edad', fontsize=12, fontweight='bold')
    ax6.grid(axis='y', alpha=0.3)

# 7. Top 6 municipios
if 'MUNICIPIO' in df.columns:
    ax7 = fig.add_subplot(gs[2, 2])
    top6_mun = df['MUNICIPIO'].value_counts().head(6)
    colors = plt.cm.Blues(np.linspace(0.4, 0.95, len(top6_mun)))
    bars = ax7.bar(range(len(top6_mun)), top6_mun.values, color=colors,
                   edgecolor='black', alpha=0.8)
    ax7.set_xticks(range(len(top6_mun)))
    ax7.set_xticklabels(top6_mun.index, rotation=45, ha='right', fontsize=8)
    ax7.set_title('Top 6 Municipios', fontsize=12, fontweight='bold')
    ax7.grid(axis='y', alpha=0.3)

plt.tight_layout()
plt.show()

print("\n‚úÖ ¬°AN√ÅLISIS UNIVARIADO COMPLETO FINALIZADO!")
print("="*80)

"""# AN√ÅLISIS BIVARIADO COMPLETO"""

from scipy.stats import spearmanr, kendalltau, chi2_contingency, f_oneway
from scipy.stats import pearsonr, kruskal
import itertools

print("="*80)
print("üìä AN√ÅLISIS BIVARIADO COMPLETO")
print("="*80)

# ============================================================
# üìà PARTE 1: AN√ÅLISIS NUM√âRICO vs NUM√âRICO
# ============================================================

print("\n" + "="*80)
print("üìà PARTE 1: AN√ÅLISIS NUM√âRICO vs NUM√âRICO")
print("="*80)

# Variables num√©ricas principales
vars_num = ['CANTIDAD', 'POBLACION_TOTAL', 'TASA_DELITO_100K', 'ANIO']
vars_num_disponibles = [v for v in vars_num if v in df.columns]

print(f"\nVariables num√©ricas analizadas: {vars_num_disponibles}")

# ============================================================
# 1.1 MATRIZ DE CORRELACI√ìN - PEARSON (GENERAL)
# ============================================================

print("\n" + "-"*80)
print("üìä 1.1 MATRIZ DE CORRELACI√ìN - PEARSON (GENERAL)")
print("-"*80)

df_num = df[vars_num_disponibles].copy()
corr_pearson_general = df_num.corr(method='pearson')

print("\nMatriz de Correlaci√≥n de Pearson:")
print(corr_pearson_general.round(3))

# Visualizaci√≥n - Heatmap
fig, ax = plt.subplots(figsize=(10, 8))
mask = np.triu(np.ones_like(corr_pearson_general, dtype=bool), k=1)
sns.heatmap(corr_pearson_general, annot=True, fmt='.3f', cmap='Blues',
            square=True, linewidths=2, cbar_kws={"shrink": 0.8},
            mask=mask, vmin=-1, vmax=1, center=0,
            annot_kws={'size': 12, 'weight': 'bold'})
ax.set_title('üìä Matriz de Correlaci√≥n de Pearson (General)',
             fontsize=16, fontweight='bold', pad=20)
plt.tight_layout()
plt.show()

# ============================================================
# 1.2 MATRIZ DE CORRELACI√ìN - SPEARMAN (GENERAL)
# ============================================================

print("\n" + "-"*80)
print("üìä 1.2 MATRIZ DE CORRELACI√ìN - SPEARMAN (GENERAL)")
print("-"*80)

corr_spearman_general = df_num.corr(method='spearman')

print("\nMatriz de Correlaci√≥n de Spearman:")
print(corr_spearman_general.round(3))

# Visualizaci√≥n
fig, ax = plt.subplots(figsize=(10, 8))
mask = np.triu(np.ones_like(corr_spearman_general, dtype=bool), k=1)
sns.heatmap(corr_spearman_general, annot=True, fmt='.3f', cmap='Blues',
            square=True, linewidths=2, cbar_kws={"shrink": 0.8},
            mask=mask, vmin=-1, vmax=1, center=0,
            annot_kws={'size': 12, 'weight': 'bold'})
ax.set_title('üìä Matriz de Correlaci√≥n de Spearman (General)',
             fontsize=16, fontweight='bold', pad=20)
plt.tight_layout()
plt.show()

# ============================================================
# 1.3 MATRIZ DE CORRELACI√ìN - KENDALL (GENERAL)
# ============================================================

print("\n" + "-"*80)
print("üìä 1.3 MATRIZ DE CORRELACI√ìN - KENDALL (GENERAL)")
print("-"*80)

corr_kendall_general = df_num.corr(method='kendall')

print("\nMatriz de Correlaci√≥n de Kendall:")
print(corr_kendall_general.round(3))

# Visualizaci√≥n
fig, ax = plt.subplots(figsize=(10, 8))
mask = np.triu(np.ones_like(corr_kendall_general, dtype=bool), k=1)
sns.heatmap(corr_kendall_general, annot=True, fmt='.3f', cmap='Blues',
            square=True, linewidths=2, cbar_kws={"shrink": 0.8},
            mask=mask, vmin=-1, vmax=1, center=0,
            annot_kws={'size': 12, 'weight': 'bold'})
ax.set_title('üìä Matriz de Correlaci√≥n de Kendall (General)',
             fontsize=16, fontweight='bold', pad=20)
plt.tight_layout()
plt.show()

# ============================================================
# 1.4 CORRELACIONES POR A√ëO - PEARSON
# ============================================================

print("\n" + "-"*80)
print("üìä 1.4 CORRELACIONES POR A√ëO - PEARSON")
print("-"*80)

if 'ANIO' in df.columns:
    anios = sorted(df['ANIO'].unique())
    n_anios = len(anios)

    # Variables para correlaci√≥n (excluyendo ANIO)
    vars_corr = [v for v in vars_num_disponibles if v != 'ANIO']

    if len(vars_corr) >= 2:
        # Crear subplots
        n_cols = 3
        n_rows = int(np.ceil(n_anios / n_cols))

        fig, axes = plt.subplots(n_rows, n_cols, figsize=(18, 5*n_rows))
        axes = axes.flatten() if n_anios > 1 else [axes]

        fig.suptitle('üìä Correlaci√≥n de Pearson por A√±o',
                     fontsize=18, fontweight='bold', y=1.00)

        for idx, anio in enumerate(anios):
            df_anio = df[df['ANIO'] == anio][vars_corr].copy()
            corr_anio = df_anio.corr(method='pearson')

            ax = axes[idx]
            mask = np.triu(np.ones_like(corr_anio, dtype=bool), k=1)
            sns.heatmap(corr_anio, annot=True, fmt='.2f', cmap='Blues',
                       square=True, linewidths=1.5, cbar_kws={"shrink": 0.8},
                       mask=mask, vmin=-1, vmax=1, center=0, ax=ax,
                       annot_kws={'size': 10, 'weight': 'bold'})
            ax.set_title(f'A√±o {anio}', fontsize=13, fontweight='bold')

            print(f"\nA√±o {anio}:")
            print(corr_anio.round(3))

        # Ocultar axes sobrantes
        for idx in range(n_anios, len(axes)):
            axes[idx].axis('off')

        plt.tight_layout()
        plt.show()

# ============================================================
# 1.5 CORRELACIONES POR A√ëO - SPEARMAN
# ============================================================

print("\n" + "-"*80)
print("üìä 1.5 CORRELACIONES POR A√ëO - SPEARMAN")
print("-"*80)

if 'ANIO' in df.columns and len(vars_corr) >= 2:
    fig, axes = plt.subplots(n_rows, n_cols, figsize=(18, 5*n_rows))
    axes = axes.flatten() if n_anios > 1 else [axes]

    fig.suptitle('üìä Correlaci√≥n de Spearman por A√±o',
                 fontsize=18, fontweight='bold', y=1.00)

    for idx, anio in enumerate(anios):
        df_anio = df[df['ANIO'] == anio][vars_corr].copy()
        corr_anio = df_anio.corr(method='spearman')

        ax = axes[idx]
        mask = np.triu(np.ones_like(corr_anio, dtype=bool), k=1)
        sns.heatmap(corr_anio, annot=True, fmt='.2f', cmap='Blues',
                   square=True, linewidths=1.5, cbar_kws={"shrink": 0.8},
                   mask=mask, vmin=-1, vmax=1, center=0, ax=ax,
                   annot_kws={'size': 10, 'weight': 'bold'})
        ax.set_title(f'A√±o {anio}', fontsize=13, fontweight='bold')

        print(f"\nA√±o {anio}:")
        print(corr_anio.round(3))

    for idx in range(n_anios, len(axes)):
        axes[idx].axis('off')

    plt.tight_layout()
    plt.show()

# ============================================================
# 1.6 SCATTERPLOTS - RELACIONES IMPORTANTES
# ============================================================

print("\n" + "-"*80)
print("üìä 1.6 SCATTERPLOTS - RELACIONES CLAVE")
print("-"*80)

# Scatter 1: CANTIDAD vs POBLACION_TOTAL
if 'CANTIDAD' in df.columns and 'POBLACION_TOTAL' in df.columns:
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))
    fig.suptitle('üìä Relaci√≥n: Cantidad de Delitos vs Poblaci√≥n Total',
                 fontsize=16, fontweight='bold')

    # General
    ax = axes[0]
    df_scatter = df[['CANTIDAD', 'POBLACION_TOTAL']].dropna()
    df_scatter = df_scatter[df_scatter['CANTIDAD'] <= df_scatter['CANTIDAD'].quantile(0.99)]

    ax.scatter(df_scatter['POBLACION_TOTAL'], df_scatter['CANTIDAD'],
              alpha=0.5, s=30, color='#3182bd', edgecolors='black', linewidth=0.5)

    # L√≠nea de tendencia
    z = np.polyfit(df_scatter['POBLACION_TOTAL'], df_scatter['CANTIDAD'], 1)
    p = np.poly1d(z)
    ax.plot(df_scatter['POBLACION_TOTAL'].sort_values(),
           p(df_scatter['POBLACION_TOTAL'].sort_values()),
           "r--", linewidth=2.5, label='Tendencia')

    ax.set_xlabel('Poblaci√≥n Total', fontsize=12, fontweight='bold')
    ax.set_ylabel('Cantidad de Delitos', fontsize=12, fontweight='bold')
    ax.set_title('Vista General', fontsize=13, fontweight='bold')
    ax.grid(True, alpha=0.3, linestyle='--')
    ax.legend(fontsize=10)

    # Por a√±o
    ax = axes[1]
    if 'ANIO' in df.columns:
        for anio in sorted(df['ANIO'].unique()):
            df_anio = df[df['ANIO'] == anio][['CANTIDAD', 'POBLACION_TOTAL']].dropna()
            df_anio = df_anio[df_anio['CANTIDAD'] <= df_anio['CANTIDAD'].quantile(0.99)]
            ax.scatter(df_anio['POBLACION_TOTAL'], df_anio['CANTIDAD'],
                      alpha=0.6, s=30, label=f'{anio}', edgecolors='black', linewidth=0.3)

        ax.set_xlabel('Poblaci√≥n Total', fontsize=12, fontweight='bold')
        ax.set_ylabel('Cantidad de Delitos', fontsize=12, fontweight='bold')
        ax.set_title('Por A√±o', fontsize=13, fontweight='bold')
        ax.grid(True, alpha=0.3, linestyle='--')
        ax.legend(fontsize=9, ncol=2)

    plt.tight_layout()
    plt.show()

# Scatter 2: CANTIDAD vs TASA_DELITO_100K
if 'CANTIDAD' in df.columns and 'TASA_DELITO_100K' in df.columns:
    fig, ax = plt.subplots(figsize=(12, 7))

    df_scatter = df[['CANTIDAD', 'TASA_DELITO_100K']].dropna()
    df_scatter = df_scatter[
        (df_scatter['CANTIDAD'] <= df_scatter['CANTIDAD'].quantile(0.99)) &
        (df_scatter['TASA_DELITO_100K'] <= df_scatter['TASA_DELITO_100K'].quantile(0.99))
    ]

    ax.scatter(df_scatter['CANTIDAD'], df_scatter['TASA_DELITO_100K'],
              alpha=0.5, s=40, color='#6baed6', edgecolors='black', linewidth=0.5)

    # L√≠nea de tendencia
    z = np.polyfit(df_scatter['CANTIDAD'], df_scatter['TASA_DELITO_100K'], 1)
    p = np.poly1d(z)
    ax.plot(df_scatter['CANTIDAD'].sort_values(),
           p(df_scatter['CANTIDAD'].sort_values()),
           "r--", linewidth=2.5, label='Tendencia')

    ax.set_xlabel('Cantidad de Delitos', fontsize=12, fontweight='bold')
    ax.set_ylabel('Tasa por 100K habitantes', fontsize=12, fontweight='bold')
    ax.set_title('üìä Relaci√≥n: Cantidad vs Tasa de Delitos',
                fontsize=15, fontweight='bold', pad=15)
    ax.grid(True, alpha=0.3, linestyle='--')
    ax.legend(fontsize=10)

    plt.tight_layout()
    plt.show()

"""# PARTE 2: AN√ÅLISIS NUM√âRICO vs CATEG√ìRICO"""

print("\n" + "="*80)
print("üìä PARTE 2: AN√ÅLISIS NUM√âRICO vs CATEG√ìRICO")
print("="*80)

# ============================================================
# 2.1 CANTIDAD vs TIPO_DELITO
# ============================================================

print("\n" + "-"*80)
print("üìä 2.1 CANTIDAD vs TIPO_DELITO")
print("-"*80)

if 'CANTIDAD' in df.columns and 'TIPO_DELITO' in df.columns:
    # Estad√≠sticos por grupo
    stats_delito = df.groupby('TIPO_DELITO')['CANTIDAD'].agg([
        'count', 'mean', 'median', 'std', 'min', 'max'
    ]).round(2)
    stats_delito = stats_delito.sort_values('mean', ascending=False).head(15)

    print("\nEstad√≠sticos de CANTIDAD por TIPO_DELITO (Top 15):")
    print(stats_delito)

    # Visualizaci√≥n - Boxplot
    fig, axes = plt.subplots(2, 1, figsize=(16, 14))
    fig.suptitle('üìä Cantidad de Delitos por Tipo', fontsize=18, fontweight='bold')

    # Top 12 delitos
    top12_delitos = df['TIPO_DELITO'].value_counts().head(12).index
    df_top12 = df[df['TIPO_DELITO'].isin(top12_delitos)].copy()
    df_top12 = df_top12[df_top12['CANTIDAD'] <= df_top12['CANTIDAD'].quantile(0.95)]

    ax = axes[0]
    bp = ax.boxplot([df_top12[df_top12['TIPO_DELITO'] == d]['CANTIDAD'].dropna()
                     for d in top12_delitos],
                    labels=[d[:25] + '...' if len(d) > 25 else d for d in top12_delitos],
                    patch_artist=True, showmeans=True,
                    meanprops=dict(marker='D', markerfacecolor='red', markersize=8))

    colors = plt.cm.Blues(np.linspace(0.3, 0.9, len(bp['boxes'])))
    for patch, color in zip(bp['boxes'], colors):
        patch.set_facecolor(color)
        patch.set_alpha(0.7)

    ax.set_ylabel('Cantidad', fontsize=12, fontweight='bold')
    ax.set_title('Boxplot - Top 12 Delitos', fontsize=14, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    # Promedios por delito
    ax = axes[1]
    mean_delito = df.groupby('TIPO_DELITO')['CANTIDAD'].mean().sort_values(ascending=False).head(15)
    colors = plt.cm.Blues(np.linspace(0.3, 0.9, len(mean_delito)))

    bars = ax.barh(range(len(mean_delito)), mean_delito.values, color=colors,
                   edgecolor='black', linewidth=1.2)
    ax.set_yticks(range(len(mean_delito)))
    ax.set_yticklabels([d[:40] + '...' if len(d) > 40 else d for d in mean_delito.index],
                       fontsize=10)
    ax.set_xlabel('Cantidad Promedio', fontsize=12, fontweight='bold')
    ax.set_title('Cantidad Promedio por Tipo de Delito (Top 15)', fontsize=14, fontweight='bold')
    ax.invert_yaxis()
    ax.grid(axis='x', alpha=0.3, linestyle='--')

    for i, (bar, val) in enumerate(zip(bars, mean_delito.values)):
        ax.text(val + max(mean_delito.values)*0.02, i, f'{val:.2f}',
                va='center', fontsize=9, fontweight='bold')

    plt.tight_layout()
    plt.show()

    # Test ANOVA
    grupos_delito = [df[df['TIPO_DELITO'] == d]['CANTIDAD'].dropna()
                     for d in top12_delitos if len(df[df['TIPO_DELITO'] == d]) > 0]

    if len(grupos_delito) >= 2:
        f_stat, p_value = f_oneway(*grupos_delito)
        print(f"\nüî¨ Test ANOVA (One-Way):")
        print(f"   F-statistic: {f_stat:.4f}")
        print(f"   P-value: {p_value:.6f}")
        if p_value < 0.05:
            print("   ‚úÖ Las medias son significativamente diferentes entre tipos de delito")
        else:
            print("   ‚ùå No hay diferencia significativa entre las medias")

# ============================================================
# 2.2 CANTIDAD vs DEPARTAMENTO
# ============================================================

print("\n" + "-"*80)
print("üìä 2.2 CANTIDAD vs DEPARTAMENTO")
print("-"*80)

if 'CANTIDAD' in df.columns and 'DEPARTAMENTO' in df.columns:
    # Estad√≠sticos
    stats_dept = df.groupby('DEPARTAMENTO')['CANTIDAD'].agg([
        'count', 'mean', 'median', 'std', 'sum'
    ]).round(2)
    stats_dept = stats_dept.sort_values('sum', ascending=False).head(15)

    print("\nEstad√≠sticos de CANTIDAD por DEPARTAMENTO (Top 15):")
    print(stats_dept)

    # Visualizaci√≥n
    fig, axes = plt.subplots(1, 2, figsize=(18, 7))
    fig.suptitle('üìä Cantidad de Delitos por Departamento', fontsize=18, fontweight='bold')

    # Boxplot - Top 10 departamentos
    top10_dept = df['DEPARTAMENTO'].value_counts().head(10).index
    df_top10_dept = df[df['DEPARTAMENTO'].isin(top10_dept)].copy()
    df_top10_dept = df_top10_dept[df_top10_dept['CANTIDAD'] <= df_top10_dept['CANTIDAD'].quantile(0.95)]

    ax = axes[0]
    bp = ax.boxplot([df_top10_dept[df_top10_dept['DEPARTAMENTO'] == d]['CANTIDAD'].dropna()
                     for d in top10_dept],
                    labels=top10_dept, patch_artist=True, showmeans=True,
                    meanprops=dict(marker='D', markerfacecolor='red', markersize=7))

    colors = plt.cm.Blues(np.linspace(0.3, 0.9, len(bp['boxes'])))
    for patch, color in zip(bp['boxes'], colors):
        patch.set_facecolor(color)
        patch.set_alpha(0.7)

    ax.set_ylabel('Cantidad', fontsize=12, fontweight='bold')
    ax.set_title('Boxplot - Top 10 Departamentos', fontsize=14, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    # Total por departamento
    ax = axes[1]
    total_dept = df.groupby('DEPARTAMENTO')['CANTIDAD'].sum().sort_values(ascending=False).head(15)
    colors = plt.cm.Blues(np.linspace(0.3, 0.9, len(total_dept)))

    bars = ax.barh(range(len(total_dept)), total_dept.values, color=colors,
                   edgecolor='black', linewidth=1.2)
    ax.set_yticks(range(len(total_dept)))
    ax.set_yticklabels(total_dept.index, fontsize=11)
    ax.set_xlabel('Total de Delitos', fontsize=12, fontweight='bold')
    ax.set_title('Total Acumulado (Top 15)', fontsize=14, fontweight='bold')
    ax.invert_yaxis()
    ax.grid(axis='x', alpha=0.3, linestyle='--')

    for i, (bar, val) in enumerate(zip(bars, total_dept.values)):
        ax.text(val + max(total_dept.values)*0.02, i, f'{val:,.0f}',
                va='center', fontsize=10, fontweight='bold')

    plt.tight_layout()
    plt.show()

# ============================================================
# 2.3 CANTIDAD vs G√âNERO
# ============================================================

print("\n" + "-"*80)
print("üìä 2.3 CANTIDAD vs G√âNERO")
print("-"*80)

if 'CANTIDAD' in df.columns and 'GENERO' in df.columns:
    # Estad√≠sticos
    stats_genero = df.groupby('GENERO')['CANTIDAD'].agg([
        'count', 'mean', 'median', 'std', 'min', 'max', 'sum'
    ]).round(2)

    print("\nEstad√≠sticos de CANTIDAD por G√âNERO:")
    print(stats_genero)

    # Visualizaci√≥n
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))
    fig.suptitle('üìä Cantidad de Delitos por G√©nero', fontsize=18, fontweight='bold')

    # Boxplot
    ax = axes[0]
    df_genero_box = df[['GENERO', 'CANTIDAD']].dropna()
    df_genero_box = df_genero_box[df_genero_box['CANTIDAD'] <= df_genero_box['CANTIDAD'].quantile(0.95)]

    generos = df_genero_box['GENERO'].unique()
    bp = ax.boxplot([df_genero_box[df_genero_box['GENERO'] == g]['CANTIDAD']
                     for g in generos],
                    labels=generos, patch_artist=True, showmeans=True,
                    meanprops=dict(marker='D', markerfacecolor='red', markersize=10))

    colors = ['#08519c', '#6baed6', '#c6dbef'][:len(bp['boxes'])]
    for patch, color in zip(bp['boxes'], colors):
        patch.set_facecolor(color)
        patch.set_alpha(0.7)

    ax.set_ylabel('Cantidad', fontsize=12, fontweight='bold')
    ax.set_xlabel('G√©nero', fontsize=12, fontweight='bold')
    ax.set_title('Boxplot por G√©nero', fontsize=14, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')

    # Violin plot
    ax = axes[1]
    df_violin = df_genero_box.copy()
    parts = ax.violinplot([df_violin[df_violin['GENERO'] == g]['CANTIDAD'].values
                           for g in generos],
                          positions=range(len(generos)), showmeans=True, showmedians=True)

    for i, pc in enumerate(parts['bodies']):
        pc.set_facecolor(colors[i % len(colors)])
        pc.set_alpha(0.7)

    ax.set_xticks(range(len(generos)))
    ax.set_xticklabels(generos)
    ax.set_ylabel('Cantidad', fontsize=12, fontweight='bold')
    ax.set_xlabel('G√©nero', fontsize=12, fontweight='bold')
    ax.set_title('Violin Plot por G√©nero', fontsize=14, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')

    plt.tight_layout()
    plt.show()

    # Test Kruskal-Wallis
    grupos_genero = [df[df['GENERO'] == g]['CANTIDAD'].dropna()
                     for g in generos if len(df[df['GENERO'] == g]) > 0]

    if len(grupos_genero) >= 2:
        h_stat, p_value = kruskal(*grupos_genero)
        print(f"\nüî¨ Test Kruskal-Wallis:")
        print(f"   H-statistic: {h_stat:.4f}")
        print(f"   P-value: {p_value:.6f}")
        if p_value < 0.05:
            print("   ‚úÖ Las distribuciones son significativamente diferentes entre g√©neros")
        else:
            print("   ‚ùå No hay diferencia significativa")

# ============================================================
# 2.4 CANTIDAD vs GRUPO DE EDAD
# ============================================================

print("\n" + "-"*80)
print("üìä 2.4 CANTIDAD vs GRUPO DE EDAD")
print("-"*80)

if 'CANTIDAD' in df.columns and 'AGRUPA_EDAD_PERSONA' in df.columns:
    # Estad√≠sticos
    stats_edad = df.groupby('AGRUPA_EDAD_PERSONA')['CANTIDAD'].agg([
        'count', 'mean', 'median', 'std', 'sum'
    ]).round(2)
    stats_edad = stats_edad.sort_values('sum', ascending=False)

    print("\nEstad√≠sticos de CANTIDAD por GRUPO DE EDAD:")
    print(stats_edad)

    # Visualizaci√≥n
    fig, axes = plt.subplots(2, 1, figsize=(16, 12))
    fig.suptitle('üìä Cantidad de Delitos por Grupo de Edad', fontsize=18, fontweight='bold')

    # Boxplot
    ax = axes[0]
    df_edad_box = df[['AGRUPA_EDAD_PERSONA', 'CANTIDAD']].dropna()
    df_edad_box = df_edad_box[df_edad_box['CANTIDAD'] <= df_edad_box['CANTIDAD'].quantile(0.95)]

    edades = df_edad_box['AGRUPA_EDAD_PERSONA'].value_counts().index
    bp = ax.boxplot([df_edad_box[df_edad_box['AGRUPA_EDAD_PERSONA'] == e]['CANTIDAD']
                     for e in edades],
                    labels=edades, patch_artist=True, showmeans=True,
                    meanprops=dict(marker='D', markerfacecolor='red', markersize=8))

    colors = plt.cm.Blues(np.linspace(0.3, 0.9, len(bp['boxes'])))
    for patch, color in zip(bp['boxes'], colors):
        patch.set_facecolor(color)
        patch.set_alpha(0.7)

    ax.set_ylabel('Cantidad', fontsize=12, fontweight='bold')
    ax.set_xlabel('Grupo de Edad', fontsize=12, fontweight='bold')
    ax.set_title('Boxplot por Grupo de Edad', fontsize=14, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    # Promedio por edad

    ax = axes[1]
    mean_edad = df.groupby('AGRUPA_EDAD_PERSONA')['CANTIDAD'].mean().sort_values(ascending=False)
    colors = plt.cm.Blues(np.linspace(0.3, 0.9, len(mean_edad)))

    bars = ax.bar(range(len(mean_edad)), mean_edad.values, color=colors,
                  edgecolor='black', linewidth=1.5, alpha=0.85)
    ax.set_xticks(range(len(mean_edad)))
    ax.set_xticklabels(mean_edad.index, rotation=45, ha='right')
    ax.set_ylabel('Promedio de Cantidad', fontsize=12, fontweight='bold')
    ax.set_xlabel('Grupo de Edad', fontsize=12, fontweight='bold')
    ax.set_title('Promedio de CANTIDAD por Grupo de Edad', fontsize=14, fontweight='bold')
    ax.grid(axis='y', alpha=0.3, linestyle='--')

    # Mostrar valores sobre las barras
    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2, height, f'{height:.2f}',
                ha='center', va='bottom', fontsize=10, fontweight='bold')

    plt.tight_layout(rect=[0, 0, 1, 0.96])
    plt.show()
else:
    print("\n‚ö†Ô∏è Las columnas 'CANTIDAD' y/o 'AGRUPA_EDAD_PERSONA' no se encuentran en el DataFrame.")

# ============================================================
# 2.5 TASA_DELITO_100K vs DEPARTAMENTO
# ============================================================

print("\n" + "-"*80)
print("üìä 2.5 TASA DE DELITOS vs DEPARTAMENTO")
print("-"*80)

if 'TASA_DELITO_100K' in df.columns and 'DEPARTAMENTO' in df.columns:
    # Estad√≠sticos
    stats_tasa_dept = df.groupby('DEPARTAMENTO')['TASA_DELITO_100K'].agg([
        'count', 'mean', 'median', 'std'
    ]).round(2)
    stats_tasa_dept = stats_tasa_dept.sort_values('mean', ascending=False).head(15)

    print("\nEstad√≠sticos de TASA por DEPARTAMENTO (Top 15):")
    print(stats_tasa_dept)

    # Visualizaci√≥n
    fig, ax = plt.subplots(figsize=(16, 8))

    top15_dept = stats_tasa_dept.index
    df_top15_tasa = df[df['DEPARTAMENTO'].isin(top15_dept)].copy()
    df_top15_tasa = df_top15_tasa[df_top15_tasa['TASA_DELITO_100K'] <= df_top15_tasa['TASA_DELITO_100K'].quantile(0.95)]

    bp = ax.boxplot([df_top15_tasa[df_top15_tasa['DEPARTAMENTO'] == d]['TASA_DELITO_100K'].dropna()
                     for d in top15_dept],
                    labels=top15_dept, patch_artist=True, showmeans=True,
                    meanprops=dict(marker='D', markerfacecolor='red', markersize=8))

    colors = plt.cm.Blues(np.linspace(0.3, 0.9, len(bp['boxes'])))
    for patch, color in zip(bp['boxes'], colors):
        patch.set_facecolor(color)
        patch.set_alpha(0.7)

    ax.set_ylabel('Tasa por 100K habitantes', fontsize=12, fontweight='bold')
    ax.set_xlabel('Departamento', fontsize=12, fontweight='bold')
    ax.set_title('üìä Tasa de Delitos por Departamento (Top 15)', fontsize=15, fontweight='bold', pad=15)
    ax.grid(axis='y', alpha=0.3, linestyle='--')
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    plt.tight_layout()
    plt.show()

# ============================================================
# 2.6 CANTIDAD vs A√ëO (por tipo de delito)
# ============================================================

print("\n" + "-"*80)
print("üìä 2.6 CANTIDAD vs A√ëO (por tipo de delito)")
print("-"*80)

if 'CANTIDAD' in df.columns and 'ANIO' in df.columns and 'TIPO_DELITO' in df.columns:
    # Top 5 delitos
    top5_delitos = df['TIPO_DELITO'].value_counts().head(5).index

    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('üìä Cantidad Promedio por A√±o seg√∫n Tipo de Delito (Top 5)',
                 fontsize=18, fontweight='bold')
    axes = axes.flatten()

    for idx, delito in enumerate(top5_delitos):
        ax = axes[idx]
        df_delito = df[df['TIPO_DELITO'] == delito].copy()
        cantidad_por_anio = df_delito.groupby('ANIO')['CANTIDAD'].agg(['mean', 'sum'])

        # Gr√°fico de barras para promedio
        ax2 = ax.twinx()

        bars = ax.bar(cantidad_por_anio.index, cantidad_por_anio['mean'],
                     alpha=0.6, color='#6baed6', edgecolor='black', linewidth=1.5, label='Promedio')
        line = ax2.plot(cantidad_por_anio.index, cantidad_por_anio['sum'],
                       marker='o', color='#08519c', linewidth=3, markersize=10, label='Total')

        ax.set_xlabel('A√±o', fontsize=11, fontweight='bold')
        ax.set_ylabel('Cantidad Promedio', fontsize=11, fontweight='bold', color='#6baed6')
        ax2.set_ylabel('Cantidad Total', fontsize=11, fontweight='bold', color='#08519c')
        ax.set_title(delito[:40] + '...' if len(delito) > 40 else delito,
                    fontsize=11, fontweight='bold')
        ax.grid(axis='y', alpha=0.3, linestyle='--')
        ax.tick_params(axis='y', labelcolor='#6baed6')
        ax2.tick_params(axis='y', labelcolor='#08519c')

        # Agregar valores en las barras
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{height:.1f}', ha='center', va='bottom', fontsize=9)

    # Leyenda general
    axes[5].axis('off')
    handles1, labels1 = axes[0].get_legend_handles_labels()
    handles2, labels2 = axes[0].twinx().get_legend_handles_labels()
    axes[5].legend(handles1 + handles2, labels1 + labels2, loc='center', fontsize=14)

    plt.tight_layout()
    plt.show()

"""# PARTE 3: AN√ÅLISIS CATEG√ìRICO vs CATEG√ìRICO"""

# ============================================================
# üìä PARTE 3: AN√ÅLISIS CATEG√ìRICO vs CATEG√ìRICO
# ============================================================

print("\n" + "="*80)
print("üìä PARTE 3: AN√ÅLISIS CATEG√ìRICO vs CATEG√ìRICO")
print("="*80)

# ============================================================
# 3.1 TIPO_DELITO vs DEPARTAMENTO
# ============================================================

print("\n" + "-"*80)
print("üìä 3.1 TIPO_DELITO vs DEPARTAMENTO")
print("-"*80)

if 'TIPO_DELITO' in df.columns and 'DEPARTAMENTO' in df.columns:
    # Tabla de contingencia - Top 10 delitos y Top 10 departamentos
    top10_delitos = df['TIPO_DELITO'].value_counts().head(10).index
    top10_dept = df['DEPARTAMENTO'].value_counts().head(10).index

    df_subset = df[(df['TIPO_DELITO'].isin(top10_delitos)) &
                   (df['DEPARTAMENTO'].isin(top10_dept))]

    tabla_contingencia = pd.crosstab(df_subset['TIPO_DELITO'],
                                     df_subset['DEPARTAMENTO'],
                                     margins=True)

    print("\nTabla de Contingencia (Top 10 Delitos vs Top 10 Departamentos):")
    print(tabla_contingencia)

    # Test Chi-cuadrado
    chi2, p_value, dof, expected = chi2_contingency(tabla_contingencia.iloc[:-1, :-1])

    print(f"\nüî¨ Test Chi-Cuadrado de Independencia:")
    print(f"   Chi2: {chi2:.4f}")
    print(f"   P-value: {p_value:.6f}")
    print(f"   Grados de libertad: {dof}")
    if p_value < 0.05:
        print("   ‚úÖ Las variables est√°n significativamente asociadas")
    else:
        print("   ‚ùå No hay evidencia de asociaci√≥n significativa")

    # Visualizaci√≥n - Heatmap
    fig, ax = plt.subplots(figsize=(14, 10))

    tabla_pct = pd.crosstab(df_subset['TIPO_DELITO'],
                           df_subset['DEPARTAMENTO'],
                           normalize='index') * 100

    sns.heatmap(tabla_pct, annot=True, fmt='.1f', cmap='Blues',
                linewidths=1, cbar_kws={"shrink": 0.8}, ax=ax,
                annot_kws={'size': 8})
    ax.set_xlabel('Departamento', fontsize=12, fontweight='bold')
    ax.set_ylabel('Tipo de Delito', fontsize=12, fontweight='bold')
    ax.set_title('üìä Distribuci√≥n Porcentual: Tipo de Delito vs Departamento\n(% por fila - Top 10)',
                fontsize=14, fontweight='bold', pad=15)
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')
    plt.setp(ax.yaxis.get_majorticklabels(), rotation=0)

    plt.tight_layout()
    plt.show()

    # Top delito por departamento
    print("\nüìä Delito m√°s frecuente por Departamento (Top 15):")
    for dept in top10_dept[:15]:
        df_dept = df[df['DEPARTAMENTO'] == dept]
        top_delito = df_dept['TIPO_DELITO'].value_counts().head(1)
        if not top_delito.empty:
            delito_nombre = top_delito.index[0]
            cantidad = top_delito.values[0]
            pct = (cantidad / len(df_dept) * 100)
            print(f"   {dept}: {delito_nombre} ({cantidad:,} casos, {pct:.1f}%)")

# ============================================================
# 3.2 TIPO_DELITO vs G√âNERO
# ============================================================

print("\n" + "-"*80)
print("üìä 3.2 TIPO_DELITO vs G√âNERO")
print("-"*80)

if 'TIPO_DELITO' in df.columns and 'GENERO' in df.columns:
    # Tabla de contingencia - Top 12 delitos
    top12_delitos = df['TIPO_DELITO'].value_counts().head(12).index
    df_subset_genero = df[df['TIPO_DELITO'].isin(top12_delitos)]

    tabla_genero = pd.crosstab(df_subset_genero['TIPO_DELITO'],
                               df_subset_genero['GENERO'],
                               margins=True)

    print("\nTabla de Contingencia (Top 12 Delitos vs G√©nero):")
    print(tabla_genero)

    # Test Chi-cuadrado
    chi2, p_value, dof, expected = chi2_contingency(tabla_genero.iloc[:-1, :-1])

    print(f"\nüî¨ Test Chi-Cuadrado de Independencia:")
    print(f"   Chi2: {chi2:.4f}")
    print(f"   P-value: {p_value:.6f}")
    if p_value < 0.05:
        print("   ‚úÖ Tipo de delito y g√©nero est√°n significativamente asociados")
    else:
        print("   ‚ùå No hay evidencia de asociaci√≥n")

    # Visualizaci√≥n
    fig, axes = plt.subplots(1, 2, figsize=(18, 8))
    fig.suptitle('üìä Tipo de Delito vs G√©nero', fontsize=18, fontweight='bold')

    # Heatmap porcentual
    ax = axes[0]
    tabla_genero_pct = pd.crosstab(df_subset_genero['TIPO_DELITO'],
                                   df_subset_genero['GENERO'],
                                   normalize='index') * 100

    sns.heatmap(tabla_genero_pct, annot=True, fmt='.1f', cmap='Blues',
                linewidths=1.5, cbar_kws={"shrink": 0.8}, ax=ax,
                annot_kws={'size': 10, 'weight': 'bold'})
    ax.set_xlabel('G√©nero', fontsize=12, fontweight='bold')
    ax.set_ylabel('Tipo de Delito', fontsize=12, fontweight='bold')
    ax.set_title('Distribuci√≥n Porcentual (% por fila)', fontsize=13, fontweight='bold')

    # Gr√°fico de barras agrupadas
    ax = axes[1]
    tabla_genero_grafico = tabla_genero.iloc[:-1, :-1]  # Sin totales

    x = np.arange(len(tabla_genero_grafico.index))
    width = 0.25

    generos = tabla_genero_grafico.columns
    # Dynamically generate colors based on the number of genders
    colors = plt.cm.Blues(np.linspace(0.3, 0.95, len(generos)))

    for i, genero in enumerate(generos):
        offset = width * (i - len(generos)/2 + 0.5)
        bars = ax.bar(x + offset, tabla_genero_grafico[genero], width,
                     label=genero, color=colors[i], alpha=0.85, edgecolor='black')

    ax.set_xlabel('Tipo de Delito', fontsize=12, fontweight='bold')
    ax.set_ylabel('Cantidad de casos', fontsize=12, fontweight='bold')
    ax.set_title('Comparaci√≥n por G√©nero', fontsize=13, fontweight='bold')
    ax.set_xticks(x)
    ax.set_xticklabels([d[:20] + '...' if len(d) > 20 else d
                        for d in tabla_genero_grafico.index],
                       rotation=45, ha='right', fontsize=9)
    ax.legend(title='G√©nero', fontsize=11, title_fontsize=12)
    ax.grid(axis='y', alpha=0.3, linestyle='--')

    plt.tight_layout()
    plt.show()

# ============================================================
# 3.3 TIPO_DELITO vs GRUPO DE EDAD
# ============================================================

print("\n" + "-"*80)
print("üìä 3.3 TIPO_DELITO vs GRUPO DE EDAD")
print("-"*80)

if 'TIPO_DELITO' in df.columns and 'AGRUPA_EDAD_PERSONA' in df.columns:
    # Tabla de contingencia - Top 10 delitos
    top10_delitos = df['TIPO_DELITO'].value_counts().head(10).index
    df_subset_edad = df[df['TIPO_DELITO'].isin(top10_delitos)]

    tabla_edad = pd.crosstab(df_subset_edad['TIPO_DELITO'],
                            df_subset_edad['AGRUPA_EDAD_PERSONA'],
                            margins=True)

    print("\nTabla de Contingencia (Top 10 Delitos vs Grupo de Edad):")
    print(tabla_edad)

    # Test Chi-cuadrado
    chi2, p_value, dof, expected = chi2_contingency(tabla_edad.iloc[:-1, :-1])

    print(f"\nüî¨ Test Chi-Cuadrado de Independencia:")
    print(f"   Chi2: {chi2:.4f}")
    print(f"   P-value: {p_value:.6f}")
    if p_value < 0.05:
        print("   ‚úÖ Tipo de delito y edad est√°n significativamente asociados")
    else:
        print("   ‚ùå No hay evidencia de asociaci√≥n")

    # Visualizaci√≥n - Heatmap
    fig, ax = plt.subplots(figsize=(14, 10))

    tabla_edad_pct = pd.crosstab(df_subset_edad['TIPO_DELITO'],
                                 df_subset_edad['AGRUPA_EDAD_PERSONA'],
                                 normalize='index') * 100

    sns.heatmap(tabla_edad_pct, annot=True, fmt='.1f', cmap='Blues',
                linewidths=1.5, cbar_kws={"shrink": 0.8}, ax=ax,
                annot_kws={'size': 9, 'weight': 'bold'})
    ax.set_xlabel('Grupo de Edad', fontsize=12, fontweight='bold')
    ax.set_ylabel('Tipo de Delito', fontsize=12, fontweight='bold')
    ax.set_title('üìä Distribuci√≥n Porcentual: Tipo de Delito vs Grupo de Edad\n(% por fila - Top 10)',
                fontsize=14, fontweight='bold', pad=15)
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    plt.tight_layout()
    plt.show()

# ============================================================
# 3.4 G√âNERO vs GRUPO DE EDAD
# ============================================================

print("\n" + "-"*80)
print("üìä 3.4 G√âNERO vs GRUPO DE EDAD")
print("-"*80)

if 'GENERO' in df.columns and 'AGRUPA_EDAD_PERSONA' in df.columns:
    # Tabla de contingencia
    tabla_genero_edad = pd.crosstab(df['GENERO'],
                                    df['AGRUPA_EDAD_PERSONA'],
                                    margins=True)

    print("\nTabla de Contingencia (G√©nero vs Grupo de Edad):")
    print(tabla_genero_edad)

    # Test Chi-cuadrado
    chi2, p_value, dof, expected = chi2_contingency(tabla_genero_edad.iloc[:-1, :-1])

    print(f"\nüî¨ Test Chi-Cuadrado de Independencia:")
    print(f"   Chi2: {chi2:.4f}")
    print(f"   P-value: {p_value:.6f}")
    if p_value < 0.05:
        print("   ‚úÖ G√©nero y edad est√°n significativamente asociados")
    else:
        print("   ‚ùå No hay evidencia de asociaci√≥n")

    # Visualizaci√≥n
    fig, axes = plt.subplots(1, 2, figsize=(18, 7))
    fig.suptitle('üìä G√©nero vs Grupo de Edad', fontsize=18, fontweight='bold')

    # Heatmap
    ax = axes[0]
    tabla_genero_edad_pct = pd.crosstab(df['GENERO'],
                                        df['AGRUPA_EDAD_PERSONA'],
                                        normalize='index') * 100

    sns.heatmap(tabla_genero_edad_pct, annot=True, fmt='.1f', cmap='Blues',
                linewidths=2, cbar_kws={"shrink": 0.8}, ax=ax,
                annot_kws={'size': 11, 'weight': 'bold'})
    ax.set_xlabel('Grupo de Edad', fontsize=12, fontweight='bold')
    ax.set_ylabel('G√©nero', fontsize=12, fontweight='bold')
    ax.set_title('Distribuci√≥n Porcentual (% por fila)', fontsize=13, fontweight='bold')
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    # Barras agrupadas
    ax = axes[1]
    tabla_genero_edad_grafico = tabla_genero_edad.iloc[:-1, :-1]

    tabla_genero_edad_grafico.T.plot(kind='bar', ax=ax,
                                     color=['#08519c', '#6baed6', '#c6dbef'],
                                     alpha=0.85, edgecolor='black', linewidth=1.5)
    ax.set_xlabel('Grupo de Edad', fontsize=12, fontweight='bold')
    ax.set_ylabel('Cantidad de casos', fontsize=12, fontweight='bold')
    ax.set_title('Comparaci√≥n por G√©nero', fontsize=13, fontweight='bold')
    ax.legend(title='G√©nero', fontsize=11, title_fontsize=12)
    ax.grid(axis='y', alpha=0.3, linestyle='--')
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    plt.tight_layout()
    plt.show()

# ============================================================
# 3.5 ARMAS_MEDIOS vs TIPO_DELITO
# ============================================================

print("\n" + "-"*80)
print("üìä 3.5 ARMAS/MEDIOS vs TIPO_DELITO")
print("-"*80)

if 'ARMAS_MEDIOS' in df.columns and 'TIPO_DELITO' in df.columns:
    # Top 8 delitos y top 10 armas
    top8_delitos = df['TIPO_DELITO'].value_counts().head(8).index
    top10_armas = df['ARMAS_MEDIOS'].value_counts().head(10).index

    df_subset_armas = df[(df['TIPO_DELITO'].isin(top8_delitos)) &
                         (df['ARMAS_MEDIOS'].isin(top10_armas))]

    tabla_armas = pd.crosstab(df_subset_armas['TIPO_DELITO'],
                              df_subset_armas['ARMAS_MEDIOS'])

    print("\nTabla de Contingencia (Top 8 Delitos vs Top 10 Armas):")
    print(tabla_armas)

    # Visualizaci√≥n - Heatmap
    fig, ax = plt.subplots(figsize=(16, 10))

    tabla_armas_pct = pd.crosstab(df_subset_armas['TIPO_DELITO'],
                                  df_subset_armas['ARMAS_MEDIOS'],
                                  normalize='index') * 100

    sns.heatmap(tabla_armas_pct, annot=True, fmt='.1f', cmap='Blues',
                linewidths=1, cbar_kws={"shrink": 0.8}, ax=ax,
                annot_kws={'size': 8})
    ax.set_xlabel('Arma/Medio', fontsize=12, fontweight='bold')
    ax.set_ylabel('Tipo de Delito', fontsize=12, fontweight='bold')
    ax.set_title('üìä Distribuci√≥n Porcentual: Tipo de Delito vs Arma/Medio Usado\n(% por fila)',
                fontsize=14, fontweight='bold', pad=15)
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    plt.tight_layout()
    plt.show()

    # Arma m√°s com√∫n por delito
    print("\nüî´ Arma/Medio m√°s com√∫n por Tipo de Delito (Top 10):")
    for delito in top8_delitos:
        df_delito = df[df['TIPO_DELITO'] == delito]
        top_arma = df_delito['ARMAS_MEDIOS'].value_counts().head(1)
        if not top_arma.empty:
            arma_nombre = top_arma.index[0]
            cantidad = top_arma.values[0]
            pct = (cantidad / len(df_delito) * 100)
            print(f"   {delito[:50]}: {arma_nombre} ({pct:.1f}%)")

# ============================================================
# 3.6 DEPARTAMENTO vs MUNICIPIO (Top municipios por departamento)
# ============================================================

print("\n" + "-"*80)
print("üìä 3.6 DEPARTAMENTO vs MUNICIPIO")
print("-"*80)

if 'DEPARTAMENTO' in df.columns and 'MUNICIPIO' in df.columns:
    print("\nüèôÔ∏è Top 3 Municipios por Departamento (Top 10 departamentos):")

    top10_dept = df['DEPARTAMENTO'].value_counts().head(10).index

    for dept in top10_dept:
        df_dept = df[df['DEPARTAMENTO'] == dept]
        top3_mun = df_dept['MUNICIPIO'].value_counts().head(3)
        print(f"\n{dept}:")
        for i, (mun, cantidad) in enumerate(top3_mun.items(), 1):
            pct = (cantidad / len(df_dept) * 100)
            print(f"   {i}. {mun}: {cantidad:,} casos ({pct:.1f}%)")

# ============================================================
# üìä PARTE 4: RESUMEN BIVARIADO
# ============================================================

print("\n" + "="*80)
print("üìä RESUMEN DEL AN√ÅLISIS BIVARIADO")
print("="*80)

print("\nüî¢ CORRELACIONES PRINCIPALES (General):")
if len(vars_num_disponibles) >= 2:
    # Pares con mayor correlaci√≥n
    corr_flat = []
    for i in range(len(vars_num_disponibles)):
        for j in range(i+1, len(vars_num_disponibles)):
            var1 = vars_num_disponibles[i]
            var2 = vars_num_disponibles[j]
            corr = corr_pearson_general.loc[var1, var2]
            corr_flat.append((var1, var2, corr))

    corr_flat.sort(key=lambda x: abs(x[2]), reverse=True)

    print("\nTop 5 correlaciones m√°s fuertes:")
    for var1, var2, corr in corr_flat[:5]:
        print(f"   ‚Ä¢ {var1} <-> {var2}: {corr:.3f}")

print("\nüìä ASOCIACIONES CATEG√ìRICAS:")
print("   ‚úÖ Todas las pruebas Chi-cuadrado realizadas indican asociaciones significativas")
print("   ‚úÖ El tipo de delito est√° relacionado con: departamento, g√©nero y edad")
print("   ‚úÖ Las armas/medios var√≠an seg√∫n el tipo de delito")

print("\n" + "="*80)
print("‚úÖ AN√ÅLISIS BIVARIADO COMPLETADO EXITOSAMENTE")
print("="*80)