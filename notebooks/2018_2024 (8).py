# -*- coding: utf-8 -*-
"""2018--2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a_Z2morMPZb0x-vwtCYB1h2SmW3JFWBp

2018
"""

import pandas as pd

def cargar_delito(url, delito):
    # Por defecto fila 10
    posibles_headers = [10, 9]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            # Normalizar nombres
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            # Diccionario para unificar columnas
            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            # Seleccionar solo columnas clave
            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            # Eliminar filas completamente vac√≠as
            df = df.dropna(how="all")

            # Eliminar basura
            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                # CODIGO_DANE num√©rico
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception as e:
            continue

    print(f"‚ö†Ô∏è {delito}: no se pudo leer con header 9 o 10")
    return pd.DataFrame()

# Diccionario de URLs y delitos para 2018
urls_2018 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato_2018_2.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_2018_1.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_2018_0.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_2018_3.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202018.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_en_accidente_de_transito_2018_1.xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_personas_2018_1.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_residencias_2018_1.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_2018_1.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_motocicletas_2018_0.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_2018_2.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_entidades_financieras_2018_0.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_2018_0.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_2018_0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/pirateria_terrestre_2018_1.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_2018_3.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_2018_2.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_2018_1.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos 2018
dfs_2018 = []
for url, delito in urls_2018:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2018.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2018 = pd.concat(dfs_2018, ignore_index=True)

print(f"\nTotal final 2018: {df_2018.shape[0]} filas y {df_2018.shape[1]} columnas")
display(df_2018.head())

pd.read_excel("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_2018_3.xlsx", header=10).head()

# Filtrar solo Hurto de cabezas de ganado
df_hurto = df_2018[df_2018["TIPO_DELITO"] == "HURTO CABEZAS GANADO"]

# Contar los NaN por columna
nulos_hurto = df_hurto.isna().sum()

print(nulos_hurto)

df_2018.isna().sum()

df_2018['MUNICIPIO'].value_counts(dropna=False).head(10)

print(df_2018['MUNICIPIO'].dtype)   # tipo de dato real
print(df_2018['MUNICIPIO'].isna().sum())  # conteo de nulos
print(df_2018['MUNICIPIO'].head(20))      # primeros valores

df_2018[df_2018['MUNICIPIO'].isna()]

# Ordenar alfab√©ticamente por MUNICIPIO
df_2018 = df_2018.sort_values(by=["MUNICIPIO"], ascending=True).reset_index(drop=True)

print(f"\n Total ordenado: {df_2018.shape[0]} filas y {df_2018.shape[1]} columnas")
display(df_2018.head(20))  # muestra los primeros 20 municipios ordenados

"""2019"""

def cargar_delito(url, delito):
    # Por defecto fila 10
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            # Normalizar nombres
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            # Diccionario para unificar columnas
            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            # Seleccionar solo columnas clave
            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            # Eliminar filas completamente vac√≠as
            df = df.dropna(how="all")

            # Eliminar basura
            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                # CODIGO_DANE num√©rico
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception as e:
            continue

    print(f"‚ö†Ô∏è {delito}: no se pudo leer con header 9 o 10")
    return pd.DataFrame()

# Diccionario de URLs y delitos para 2019
urls_2019 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato_2019_3.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_2019_1.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_2019_0.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_2019_2.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202019.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_en_accidente_de_transito_2019.xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_personas_2019_0.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_residencias_2019_0.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_2019_0.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_motocicletas_2019_0.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_2019_0.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_entidades_financieras_2019_3.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_2019_0.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_2019_0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/pirateria_terrestre_2019_3.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_2019_3.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_2019_2.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_2019_0.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos 2019
dfs_2019 = []
for url, delito in urls_2019:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2019.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2019 = pd.concat(dfs_2019, ignore_index=True)

print(f"\nTotal final 2019: {df_2019.shape[0]} filas y {df_2019.shape[1]} columnas")
display(df_2019.head())

df_2019.isna().sum()

df_2019[df_2019['ARMAS_MEDIOS'].isna()]

"""2020"""

def cargar_delito(url, delito):
    # Por defecto fila 10
    posibles_headers = [10, 9]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            # Normalizar nombres
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            # Diccionario para unificar columnas
            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            # Seleccionar solo columnas clave
            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            # Eliminar filas completamente vac√≠as
            df = df.dropna(how="all")

            # Eliminar basura
            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                # CODIGO_DANE num√©rico
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception as e:
            continue

    print(f"‚ö†Ô∏è {delito}: no se pudo leer con header 9 o 10")
    return pd.DataFrame()


# Diccionario de URLs y delitos 2020
urls_2020 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato_2020.xls", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_2020.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_2020.xls", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_2020_1.xls", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202020.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_accidente_de_transito_2020_2.xls", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_personas_2020_0.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_residencias_2020.xls", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_2020_1.xls", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_motocicletas_2020.xls", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_2020.xls", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_entidades_financieras_2020.xls", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_2020_1.xls", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_2020.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/pirateria_terrestre_2020_1.xls", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_2020.xls", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_2020_1.xls", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_2020.xls_0.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos
dfs_2020 = []
for url, delito in urls_2020:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2020.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2020 = pd.concat(dfs_2020, ignore_index=True)

# Ordenar por MUNICIPIO (y opcionalmente tambi√©n por DEPARTAMENTO)
df_2020 = df_2020.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\nTotal final 2020: {df_2020.shape[0]} filas y {df_2020.shape[1]} columnas")
display(df_2020.head())

df_2020.isna().sum()

df_2020[df_2020['AGRUPA_EDAD_PERSONA'].isna()][['AGRUPA_EDAD_PERSONA', 'TIPO_DELITO']]

"""2021"""

def cargar_delito(url, delito):
    # Probar varios posibles encabezados
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            df = df.dropna(how="all")

            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception:
            continue

    # Si lleg√≥ aqu√≠, fall√≥ con todas
    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    return pd.DataFrame()

# Diccionario de URLs y delitos 2021
urls_2021 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato_6.xls", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_11.xls", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_9.xls", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_9.xls", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202021.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_en_accidente_de_transito_9.xls", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_personas_9.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_residencias_5.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_5.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_motocicletas_5.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_9.xls", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_entidades_financieras_9.xls", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_5.xls", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_5.xls", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_pirateria_terrestre_9.xls", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_9.xls", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_9.xls", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_10.xls", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos
dfs_2021 = []
for url, delito in urls_2021:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2021.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2021 = pd.concat(dfs_2021, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2021 = df_2021.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\nTotal final 2021: {df_2021.shape[0]} filas y {df_2021.shape[1]} columnas")
display(df_2021.head())

# Filtrar solo Hurto de cabezas de ganado
df_hurto = df_2021[df_2021["TIPO_DELITO"] == "HURTO CABEZAS GANADO"]

# Contar los NaN por columna
nulos_hurto = df_hurto.isna().sum()

print(nulos_hurto)

"""2022"""

import pandas as pd

def cargar_delito(url, delito, debug=False):
    # Posibles filas de encabezado (var√≠a entre archivos)
    posibles_headers = [9, 10, 11, 12, 8, 7, 6, 13, 14, 15]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()

            # üîß Normalizar nombres de columnas
            df.columns = (
                df.columns.astype(str)
                .str.strip()
                .str.upper()
                .str.replace(" ", "_")
                .str.replace("*", "")
                .str.replace("/", "_")
            )

            if debug:
                print(f"\nüîç {delito} - Header {header_row}:")
                print(f"Columnas encontradas: {list(df.columns[:10])}")

            # üî§ Corregir errores comunes de nombres
            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_MEDIO": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA": "FECHA_HECHO",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "AGRUPA_EDAD_PER_SONA": "AGRUPA_EDAD_PERSONA",
                "MUNICICPIO": "MUNICIPIO",  # üëà Corregido
                "DEPARTAMENTO_": "DEPARTAMENTO",  # por si hay espacio o guion
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            # üîç Filtrar columnas v√°lidas
            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            columnas_presentes = [col for col in columnas_validas if col in df.columns]
            tiene_ubicacion = "DEPARTAMENTO" in columnas_presentes or "MUNICIPIO" in columnas_presentes
            tiene_suficientes = len(columnas_presentes) >= 3

            if not (tiene_ubicacion and tiene_suficientes):
                if debug:
                    print(f"   ‚ùå Solo tiene {len(columnas_presentes)} columnas v√°lidas: {columnas_presentes}")
                continue

            if debug:
                print(f"   ‚úÖ Tiene {len(columnas_presentes)} columnas v√°lidas: {columnas_presentes}")

            df = df[[col for col in columnas_validas if col in df.columns]]

            # üßπ Eliminar filas completamente vac√≠as
            df = df.dropna(how="all")

            # üßπ Eliminar filas donde las columnas de ubicaci√≥n est√©n vac√≠as
            if "DEPARTAMENTO" in df.columns and "MUNICIPIO" in df.columns:
                df = df.dropna(subset=["DEPARTAMENTO", "MUNICIPIO"], how="all")
            elif "DEPARTAMENTO" in df.columns:
                df = df.dropna(subset=["DEPARTAMENTO"])
            elif "MUNICIPIO" in df.columns:
                df = df.dropna(subset=["MUNICIPIO"])

            # üß± Cortar desde "TOTAL" hacia abajo si aparece
            for col in ["DEPARTAMENTO", "MUNICIPIO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    mask_total = df[col].astype(str).str.contains("TOTAL", na=False, case=False)
                    if mask_total.any():
                        primera_fila_total = mask_total.idxmax()
                        df = df.loc[:primera_fila_total - 1]
                        break

            # üßΩ Limpieza reforzada
            basura_regex = (
                "TOTAL|FUENTE|SIEDCO|Elaborado|Revisado|Autorizado|Ley 1098|"
                "Agrupaci√≥n referente|Contador|DUIN|POLIC√çA NACIONAL|"
                "DIRECCI√ìN|GRUPO DE INFORMACI√ìN|LESIONES|PER√çODO|MINISTERIO"
            )
            for col in ["DEPARTAMENTO", "MUNICIPIO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            # Eliminar filas vac√≠as o con solo espacios
            df = df[df.apply(lambda row: row.astype(str).str.strip().str.len().gt(0).any(), axis=1)]

            # Eliminar filas sin municipio
            if "MUNICIPIO" in df.columns:
                df = df[df["MUNICIPIO"].notna() & (df["MUNICIPIO"].astype(str).str.strip() != "")]

            # Convertir c√≥digo DANE a num√©rico
            if "CODIGO_DANE" in df.columns:
                df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

            # Agregar tipo de delito
            df["TIPO_DELITO"] = delito

            if not df.empty:
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df

        except Exception as e:
            if debug:
                print(f"‚ùå Error en header {header_row}: {str(e)}")
            continue

    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    if debug:
        print(f"   Intenta ejecutar: cargar_delito('{url}', '{delito}', debug=True)")
    return pd.DataFrame()

# Diccionario de URLs y delitos 2022
urls_2022 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/abigeato.xls_2.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenazas_13.xls", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos_sexuales_11.xls", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_11.xls", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional%202022.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios_en_accidente_de_transito_11.xls", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_personas_17.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_residencias_4.xls", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_automotores_4.xls", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_motocicletas_7.xls", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_comercio_11.xls", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_entidades_financieras_11.xls", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_en_accidente_de_transito_7.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones_personales_0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto_a_pirateria_terrestre_11.xls", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro_11.xls", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_11.xls", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia_intrafamiliar_12.xls", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos
dfs_2022 = []
for url, delito in urls_2022:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2022.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2022 = pd.concat(dfs_2022, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2022 = df_2022.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\n Total final 2022: {df_2022.shape[0]} filas y {df_2022.shape[1]} columnas")
display(df_2022.head())

df_2022.isna().sum()

df_2022[df_2022['MUNICIPIO'].isna()][['MUNICIPIO', 'DEPARTAMENTO',"TIPO_DELITO"]]

"""2023"""

def cargar_delito(url, delito):
    # Probar varios posibles encabezados
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            df = df.dropna(how="all")

            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception:
            continue

    # Si lleg√≥ aqu√≠, fall√≥ con todas
    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    return pd.DataFrame()

# Diccionario de URLs y delitos 2023
urls_2023 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20cabezas%20de%20ganado.._0.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/amenzas..xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/delitos%20sexuales.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/extorsion_11.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidio%20intencional_0.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/homicidios%20en%20accidente%20de%20transito....xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20a%20personas.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20a%20residencias....xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20automotores....xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20a%20motocicletas....xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20a%20comercio..._0.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20entidades%20financieras.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones%20en%20accidente%20de%20transito....xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/lesiones%20personales..._0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/hurto%20pirateria%20terrestre_1.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/secuestro..._0.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/terrorismo_4.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/violencia%20intrafamiliar....xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos
dfs_2023 = []
for url, delito in urls_2023:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2023.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2023 = pd.concat(dfs_2023, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2023 = df_2023.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\n Total final 2023: {df_2023.shape[0]} filas y {df_2023.shape[1]} columnas")
display(df_2023.head())

df_2023[df_2023['MUNICIPIO'].isna()][['MUNICIPIO', 'DEPARTAMENTO',"TIPO_DELITO"]]

"""2024"""

def cargar_delito(url, delito):
    # Probar varios posibles encabezados
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            df = df.dropna(how="all")

            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception:
            continue

    # Si lleg√≥ aqu√≠, fall√≥ con todas
    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    return pd.DataFrame()


    # ------------------------
# BASES 2024
# ------------------------
urls_2024 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20cabezas%20de%20ganado2024_0.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Amenazas2024_0.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Delitos%20sexuales2024_0.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Extorsi%C3%B3n2024_0.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional2024_0.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidios%20en%20accidente%20de%20tr%C3%A1nsito2024_0.xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20personas2024_0.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20residencias2024_0.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20automotores2024_0.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20motocicletas2024_0.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20comercio2024_0.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20entidades%20Financieras2024_0.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Lesiones%20en%20accidente%20de%20tr%C3%A1nsito2024_2.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Lesiones%20personales2024_0.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20pirater%C3%ADa%20terrestre2024_0.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Secuestro2024_0.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Terrorismo2024_0.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Violencia%20intrafamiliar2024_0.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos 2024
dfs_2024 = []
for url, delito in urls_2024:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2024.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2024 = pd.concat(dfs_2024, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2024 = df_2024.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\n Total final 2024: {df_2024.shape[0]} filas y {df_2024.shape[1]} columnas")
display(df_2024.head())

df_2024[df_2024['MUNICIPIO'].isna()][['MUNICIPIO', 'DEPARTAMENTO',"TIPO_DELITO"]]

"""2025"""

def cargar_delito(url, delito):
    # Probar varios posibles encabezados
    posibles_headers = [8, 9, 10, 11, 12]

    for header_row in posibles_headers:
        try:
            df = pd.read_excel(url, header=header_row).copy()
            df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

            renombrar = {
                "ARMAS_MEDIOS": "ARMAS_MEDIOS",
                "ARMA_MEDIO": "ARMAS_MEDIOS",
                "ARMAS/MEDIOS": "ARMAS_MEDIOS",
                "ARMAS_Y_MEDIOS": "ARMAS_MEDIOS",
                "CODIGO_DANE": "CODIGO_DANE",
                "FECHA_HECHO": "FECHA_HECHO",
                "GENERO": "GENERO",
                "CANTIDAD": "CANTIDAD",
                "AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA": "AGRUPA_EDAD_PERSONA",
                "*AGRUPA_EDAD_PERSONA*": "AGRUPA_EDAD_PERSONA"
            }
            df = df.rename(columns=lambda x: renombrar.get(x, x))

            columnas_validas = [
                "DEPARTAMENTO", "MUNICIPIO", "CODIGO_DANE",
                "ARMAS_MEDIOS", "FECHA_HECHO", "GENERO",
                "AGRUPA_EDAD_PERSONA", "CANTIDAD"
            ]
            df = df[[col for col in columnas_validas if col in df.columns]]

            df = df.dropna(how="all")

            basura_regex = "TOTAL|FUENTE|Elaborado|Revisado|Autorizado|Ley 1098|Agrupaci√≥n referente|Contador"
            for col in ["DEPARTAMENTO", "ARMAS_MEDIOS"]:
                if col in df.columns:
                    df = df[~df[col].astype(str).str.contains(basura_regex, na=False, case=False)]

            if not df.empty:
                if "CODIGO_DANE" in df.columns:
                    df["CODIGO_DANE"] = pd.to_numeric(df["CODIGO_DANE"], errors="coerce")

                df["TIPO_DELITO"] = delito
                print(f"üìå {delito}: encabezado fijo en fila {header_row}")
                return df
        except Exception:
            continue

    # Si lleg√≥ aqu√≠, fall√≥ con todas
    print(f"‚ö†Ô∏è {delito}: no se pudo leer con headers {posibles_headers}")
    return pd.DataFrame()


    # ------------------------
# BASES 2025
# ------------------------
urls_2025 = [
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20cabezas%20de%20ganado_5.xlsx", "HURTO CABEZAS GANADO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Amenazas_6.xlsx", "AMENAZAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Delitos%20sexuales_6.xlsx", "DELITOS SEXUALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Extorsi%C3%B3n_6.xlsx", "EXTORSI√ìN"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidio%20Intencional_3.xlsx", "HOMICIDIO INTENCIONAL"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Homicidios%20en%20accidente%20de%20tr%C3%A1nsito_4.xlsx", "HOMICIDIOS EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20personas_7.xlsx", "HURTO A PERSONAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20residencias_6.xlsx", "HURTO A RESIDENCIAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20automotores_3.xlsx", "HURTO AUTOMOTORES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20motocicletas_3.xlsx", "HURTO MOTOCICLETAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20comercio_5.xlsx", "HURTO A COMERCIO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20a%20entidades%20Financieras_6.xlsx", "HURTO A ENTIDADES FINANCIERAS"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Lesiones%20en%20accidente%20de%20tr%C3%A1nsito_4.xlsx", "LESIONES EN ACCIDENTE DE TR√ÅNSITO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Lesiones%20personales_5.xlsx", "LESIONES PERSONALES"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Hurto%20pirater%C3%ADa%20terrestre_3.xlsx", "PIRATER√çA TERRESTRE"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Secuestro_5.xlsx", "SECUESTRO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Terrorismo_5.xlsx", "TERRORISMO"),
    ("https://www.policia.gov.co/sites/default/files/delitos-impacto/Violencia%20intrafamiliar_5.xlsx", "VIOLENCIA INTRAFAMILIAR"),
]

# Procesar todos los archivos 2025
dfs_2025 = []
for url, delito in urls_2025:
    df = cargar_delito(url, delito)
    if not df.empty:
        dfs_2025.append(df)
        print(f"‚úÖ {delito}: {df.shape[0]} filas")

# Concatenar todo en un solo DataFrame
df_2025 = pd.concat(dfs_2025, ignore_index=True)

# Ordenar por MUNICIPIO y DEPARTAMENTO
df_2025 = df_2025.sort_values(by=["MUNICIPIO", "DEPARTAMENTO"]).reset_index(drop=True)

print(f"\n Total final 2025: {df_2025.shape[0]} filas y {df_2025.shape[1]} columnas")
display(df_2025.head())

df_2025[df_2025['MUNICIPIO'].isna()][['MUNICIPIO', 'DEPARTAMENTO',"TIPO_DELITO"]]

"""Poblacion Y DAVIPOLA"""

import pandas as pd
import requests
import numpy as np

# --------------------------
# URLs de insumos externos
# --------------------------
url_poblacion = "https://www.dane.gov.co/files/censo2018/proyecciones-de-poblacion/Municipal/PPED-AreaSexoEdadMun-2018-2042_VP.xlsx"
api_url_divipola = "https://www.datos.gov.co/resource/gdxc-w37w.json?$limit=2000"

# Cargar DIVIPOLA desde la API de datos abiertos
divipola = pd.read_json(api_url_divipola)

# Mostrar las columnas originales
print("üßê Columnas originales en DIVIPOLA:")
print(divipola.columns.tolist())

# (Opcional) ver las primeras filas
display(divipola.head())

# Cargar DIVIPOLA desde la API de datos abiertos
divipola = pd.read_json(api_url_divipola)

# üî§ Normalizar texto
divipola = divipola.rename(columns={
    "cod_dpto": "CODIGO_DEPARTAMENTO",
    "dpto": "DEPARTAMENTO",
    "cod_mpio": "CODIGO_MUNICIPIO",
    "nom_mpio": "MUNICIPIO",
    "tipo_municipio": "TIPO_MUNICIPIO",
    "longitud": "LONGITUD",
    "latitud": "LATITUD"
})

# Pasar texto a may√∫sculas y limpiar espacios
divipola["DEPARTAMENTO"] = divipola["DEPARTAMENTO"].astype(str).str.upper().str.strip()
divipola["MUNICIPIO"] = divipola["MUNICIPIO"].astype(str).str.upper().str.strip()
divipola["TIPO_MUNICIPIO"] = divipola["TIPO_MUNICIPIO"].astype(str).str.upper().str.strip()

# Convertir c√≥digos a num√©ricos
divipola["CODIGO_DEPARTAMENTO"] = pd.to_numeric(divipola["CODIGO_DEPARTAMENTO"], errors="coerce")
divipola["CODIGO_MUNICIPIO"] = pd.to_numeric(divipola["CODIGO_MUNICIPIO"], errors="coerce")

print("‚úÖ DIVIPOLA lista:")
print(divipola.head())
print(f"Total: {divipola.shape[0]} filas y {divipola.shape[1]} columnas")

# ========================================
# 1. CARGAR Y PROCESAR DIVIPOLA
# ========================================
print("üì• Descargando DIVIPOLA...")
try:
    response = requests.get(api_url_divipola)
    response.raise_for_status() # Raise an exception for bad status codes
    divipola = pd.DataFrame(response.json())

    # Normalizar nombres de columnas to uppercase immediately
    divipola.columns = divipola.columns.str.upper().str.strip()

    # Asegurar que existan las columnas necesarias and rename if necessary
    columnas_divipola_map = {
        "COD_DPTO": "CODIGO_DEPARTAMENTO",
        "DPTO": "DEPARTAMENTO",
        "COD_MPIO": "CODIGO_MUNICIPIO",
        "NOM_MPIO": "MUNICIPIO",
        "TIPO_MUNICIPIO": "TIPO_MUNICIPIO",
        "LONGITUD": "LONGITUD",
        "LATITUD": "LATITUD",
        "C_DIGO_DANE_DEL_MUNICIPIO": "CODIGO_DANE" # Add this mapping if it exists in the data
    }

    # Rename columns using the map where keys are the uppercase original names
    divipola = divipola.rename(columns={k: v for k, v in columnas_divipola_map.items() if k in divipola.columns})


    # Convertir todo a may√∫sculas y limpiar espacios for relevant columns
    for col in ['DEPARTAMENTO', 'MUNICIPIO', 'TIPO_MUNICIPIO']:
        if col in divipola.columns:
             divipola[col] = divipola[col].astype(str).str.upper().str.strip()


    # Crear CODIGO_DANE completo (concatenar c√≥digo departamento + municipio)
    # Assuming CODIGO_DEPARTAMENTO and CODIGO_MUNICIPIO exist after renaming
    if 'CODIGO_DEPARTAMENTO' in divipola.columns and 'CODIGO_MUNICIPIO' in divipola.columns:
        # Ensure they are strings before concatenating, pad with leading zeros
        divipola['CODIGO_DANE_FULL'] = divipola['CODIGO_DEPARTAMENTO'].astype(str).str.zfill(2) + \
                                       divipola['CODIGO_MUNICIPIO'].astype(str).str.zfill(3)
        # Convert the combined DANE code to numeric, coercing errors
        divipola['CODIGO_DANE_FULL'] = pd.to_numeric(divipola['CODIGO_DANE_FULL'], errors='coerce')
    elif 'CODIGO_DANE' in divipola.columns:
         # If a CODIGO_DANE column already exists and was renamed, use that
         divipola['CODIGO_DANE_FULL'] = pd.to_numeric(divipola['CODIGO_DANE'], errors='coerce')
         print("Note: Using existing 'CODIGO_DANE' column from source data.")
    else:
         print("Warning: Could not create 'CODIGO_DANE_FULL' as required columns are missing.")
         divipola['CODIGO_DANE_FULL'] = np.nan # Add the column anyway with NaNs


    print(f"‚úÖ DIVIPOLA cargada: {divipola.shape[0]} filas y {divipola.shape[1]} columnas")
    print("Columnas DIVIPOLA:", divipola.columns.tolist())
    print("\nPrimeras filas de DIVIPOLA:")
    display(divipola.head())

except requests.exceptions.RequestException as e:
    print(f"‚ùå Error al descargar DIVIPOLA: {e}")
    divipola = pd.DataFrame() # Ensure divipola is an empty DataFrame on error
except Exception as e:
    print(f"‚ùå Error al procesar DIVIPOLA: {e}")
    divipola = pd.DataFrame() # Ensure divipola is an empty DataFrame on error

# ========================================
# 2. CARGAR Y PROCESAR POBLACI√ìN
# ========================================
print("\nüì• Descargando datos de poblaci√≥n...")
# Use header=7 (row 8) and the specified sheet name
pob = pd.read_excel(url_poblacion, sheet_name='PobMunicipalx√ÅreaSexoEdad', header=7)

# Normalizar nombres de columnas
pob.columns = pob.columns.str.upper().str.strip().str.replace(' ', '_').str.replace('√Å', 'A').str.replace(".", "", regex=False)

# Explicitly select the required columns
columnas_requeridas = ['DP', 'DPNOM', 'MPIO', 'DPMP', 'A√ëO', '√ÅREA_GEOGR√ÅFICA', 'TOTAL']

# Filter for columns that actually exist after reading and initial renaming
cols_existentes = [col for col in columnas_requeridas if col in pob.columns]
pob = pob[cols_existentes].copy()

print(f"Columnas seleccionadas para procesamiento: {pob.columns.tolist()}")

# Renombrar para estandarizar
renombrar_pob = {
    'DP': 'CODIGO_DEPARTAMENTO',
    'DPNOM': 'DEPARTAMENTO',
    'MPIO': 'CODIGO_MUNICIPIO', # Assuming MPIO is code based on previous analysis
    'DPMP': 'MUNICIPIO', # Assuming DPMP is name based on previous analysis
    'A√ëO': 'ANIO',
    '√ÅREA_GEOGR√ÅFICA': 'AREA_GEOGRAFICA',
    'TOTAL': 'POBLACION_TOTAL' # This 'TOTAL' column is the total population for the row's breakdown
}

# Apply renaming only if the original column exists
pob = pob.rename(columns={k: v for k, v in renombrar_pob.items() if k in pob.columns})

# Ensure 'ANIO' column is numeric before filtering
if 'ANIO' in pob.columns:
    pob['ANIO'] = pd.to_numeric(pob['ANIO'], errors='coerce')
    # Filter years 2018-2025
    pob = pob[(pob['ANIO'] >= 2018) & (pob['ANIO'] <= 2025)].copy()
    print(f"‚úÖ Poblaci√≥n filtrada por a√±os (2018-2025): {pob.shape[0]} filas")
else:
    print("‚ö†Ô∏è 'ANIO' column not found after renaming. Skipping year filtering.")


# Filter only the TOTAL of √ÅREA_GEOGR√ÅFICA (excluding Cabecera and Rural)
if 'AREA_GEOGRAFICA' in pob.columns:
    pob = pob[pob['AREA_GEOGRAFICA'].astype(str).str.upper().str.strip() == 'TOTAL'].copy()
    print(f"‚úÖ Filtrado solo √°rea 'Total': {pob.shape[0]} filas")
else:
     print("‚ö†Ô∏è 'AREA_GEOGRAFICA' column not found. Cannot filter by area.")

# Ensure 'POBLACION_TOTAL' column exists and is numeric
if 'POBLACION_TOTAL' in pob.columns:
    pob['POBLACION_TOTAL'] = pd.to_numeric(pob['POBLACION_TOTAL'], errors='coerce')
else:
     print("‚ö†Ô∏è 'POBLACION_TOTAL' column not found. Cannot convert population to numeric.")


# Select final columns for merging
columnas_finales_pob = ['CODIGO_DEPARTAMENTO', 'CODIGO_MUNICIPIO', 'DEPARTAMENTO', 'MUNICIPIO', 'ANIO', 'POBLACION_TOTAL']
# Filter for columns that actually exist in the dataframe before selecting
cols_finales_existentes = [col for col in columnas_finales_pob if col in pob.columns]
pob_total = pob[cols_finales_existentes].copy()


# Drop duplicates and nulls based on key columns
subset_cols_dropna = [col for col in ['CODIGO_DEPARTAMENTO', 'CODIGO_MUNICIPIO', 'ANIO', 'POBLACION_TOTAL'] if col in pob_total.columns]
if subset_cols_dropna:
    pob_total = pob_total.dropna(subset=subset_cols_dropna)
    # Only drop duplicates if relevant columns exist
    subset_cols_drop_duplicates = [col for col in ['CODIGO_DEPARTAMENTO', 'CODIGO_MUNICIPIO', 'ANIO'] if col in pob_total.columns]
    if subset_cols_drop_duplicates:
         pob_total = pob_total.drop_duplicates(subset=subset_cols_drop_duplicates)
    else:
         print("‚ö†Ô∏è Cannot drop duplicates: Key columns missing in final population data.")
else:
    print("‚ö†Ô∏è Cannot drop nulls or duplicates: Key columns missing in final population data.")


print(f"‚úÖ Poblaci√≥n procesada para merge: {pob_total.shape[0]} filas")
print("\nPrimeras filas de poblaci√≥n procesada:")
display(pob_total.head())

# ============================================================
# üì¶ UNIFICAR BASES DE DELITOS 2018‚Äì2025 CON POBLACI√ìN Y DIVIPOLA (POR NOMBRE)
# ============================================================

import pandas as pd

# --- 1Ô∏è‚É£ Combinar todos los a√±os ---
dataframes_anuales = [df_2018, df_2019, df_2020, df_2021, df_2022, df_2023, df_2024, df_2025]
nombres = ["2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025"]

for df, anio in zip(dataframes_anuales, nombres):
    if "ANIO" not in df.columns:
        df["ANIO"] = int(anio)

# Concatenar todos los a√±os
df_delitos_todos = pd.concat(dataframes_anuales, ignore_index=True)

# Normalizar texto para asegurar coincidencia en los merges
for col in ["DEPARTAMENTO", "MUNICIPIO"]:
    if col in df_delitos_todos.columns:
        df_delitos_todos[col] = df_delitos_todos[col].astype(str).str.upper().str.strip()

print(f"\n‚úÖ Base unificada de delitos: {df_delitos_todos.shape[0]} filas y {df_delitos_todos.shape[1]} columnas")

# --- 2Ô∏è‚É£ Unir con DIVIPOLA por nombres ---
if 'divipola' in locals() and not divipola.empty:
    for col in ["DEPARTAMENTO", "MUNICIPIO"]:
        if col in divipola.columns:
            divipola[col] = divipola[col].astype(str).str.upper().str.strip()

    columnas_divipola = [c for c in ["DEPARTAMENTO", "MUNICIPIO", "TIPO_MUNICIPIO", "LONGITUD", "LATITUD"] if c in divipola.columns]
    df_delitos_todos = pd.merge(
        df_delitos_todos,
        divipola[columnas_divipola],
        on=["DEPARTAMENTO", "MUNICIPIO"],
        how="left"
    )
    print(f"‚úÖ Uni√≥n con DIVIPOLA completada. Filas finales: {df_delitos_todos.shape[0]}")
else:
    print("‚ö†Ô∏è No se encontr√≥ la base de DIVIPOLA o est√° vac√≠a. Se omite esta uni√≥n.")

# --- 3Ô∏è‚É£ Unir con POBLACI√ìN por nombres y a√±o ---
if 'pob_total' in locals() and not pob_total.empty:
    for col in ["DEPARTAMENTO", "MUNICIPIO"]:
        if col in pob_total.columns:
            pob_total[col] = pob_total[col].astype(str).str.upper().str.strip()

    columnas_pob = [c for c in ["DEPARTAMENTO", "MUNICIPIO", "ANIO", "POBLACION_TOTAL"] if c in pob_total.columns]
    df_final_con_poblacion = pd.merge(
        df_delitos_todos,
        pob_total[columnas_pob],
        on=["DEPARTAMENTO", "MUNICIPIO", "ANIO"],
        how="left"
    )
    print(f"‚úÖ Uni√≥n con poblaci√≥n completada. Filas finales: {df_final_con_poblacion.shape[0]}")
else:
    print("‚ö†Ô∏è No se encontr√≥ la base de poblaci√≥n o est√° vac√≠a. Se omite esta uni√≥n.")
    df_final_con_poblacion = df_delitos_todos.copy()

# --- 4Ô∏è‚É£ Calcular tasa de delitos por cada 100.000 habitantes ---
if "POBLACION_TOTAL" in df_final_con_poblacion.columns and "CANTIDAD" in df_final_con_poblacion.columns:
    df_final_con_poblacion["CANTIDAD"] = pd.to_numeric(df_final_con_poblacion["CANTIDAD"], errors="coerce")
    df_final_con_poblacion["POBLACION_TOTAL"] = pd.to_numeric(df_final_con_poblacion["POBLACION_TOTAL"], errors="coerce")
    df_final_con_poblacion["TASA_DELITO_100K"] = (
        df_final_con_poblacion["CANTIDAD"] / df_final_con_poblacion["POBLACION_TOTAL"] * 100000
    )
    print("‚úÖ Se calcul√≥ la tasa de delitos por cada 100.000 habitantes.")
else:
    print("‚ö†Ô∏è No se puede calcular la tasa: faltan columnas 'POBLACION_TOTAL' o 'CANTIDAD'.")

# --- 5Ô∏è‚É£ Guardar archivo final ---
ruta_guardado = "delitos_2018_2025_unificado.csv"
df_final_con_poblacion.to_csv(ruta_guardado, index=False, encoding="utf-8-sig")
print(f"üíæ Archivo guardado exitosamente en: {ruta_guardado}")

# Vista previa
display(df_final_con_poblacion.head(20))

# ============================================================
# üíæ EXPORTAR BASE FINAL COMPLETA A CSV (TODAS LAS COLUMNAS)
# ============================================================

# Nombre del archivo final
ruta_csv = "delitos_2018_2025_completo.csv"

# Guardar todo el DataFrame sin filtrar columnas
df_final_con_poblacion.to_csv(ruta_csv, index=False, encoding="utf-8-sig")

print(f"‚úÖ Archivo CSV exportado exitosamente con todas las columnas: {ruta_csv}")
print(f"üìä Total de filas: {df_final_con_poblacion.shape[0]}")
print(f"üìã Total de columnas: {df_final_con_poblacion.shape[1]}")

# Vista previa de las primeras filas
display(df_final_con_poblacion.head(10))

from google.colab import files

# Nombre del archivo
ruta_csv = "delitos_2018_2025_completo.csv"

# Guardar todas las columnas en CSV
df_final_con_poblacion.to_csv(ruta_csv, index=False, encoding="utf-8-sig")

# Descargar el archivo a tu equipo
files.download(ruta_csv)

"""## An√°lisis Bivariado: Tipo de Delito vs. Departamento

Vamos a agrupar los datos por `DEPARTAMENTO` y `TIPO_DELITO` para ver la distribuci√≥n de los delitos por departamento.
"""

# Agrupar por Departamento y Tipo de Delito y contar las ocurrencias
delitos_por_departamento = df_final_con_poblacion.groupby(['DEPARTAMENTO', 'TIPO_DELITO']).size().reset_index(name='COUNT')

# Ordenar por el conteo en orden descendente para ver las combinaciones m√°s frecuentes
delitos_por_departamento = delitos_por_departamento.sort_values(by='COUNT', ascending=False)

print("üìä Conteo de Delitos por Departamento y Tipo de Delito (Top 20):")
display(delitos_por_departamento.head(20))

"""We can also look at the top crime types within specific departments. Let's look at the top 5 departments."""

# Get the top 5 departments by total crime count
top_departamentos = df_final_con_poblacion['DEPARTAMENTO'].value_counts().head(5).index.tolist()

print(f"\nüìä Distribuci√≥n de Delitos en los Top 5 Departamentos ({', '.join(top_departamentos)}):")

for depto in top_departamentos:
    print(f"\n--- {depto} ---")
    # Filter data for the current department
    df_depto = delitos_por_departamento[delitos_por_departamento['DEPARTAMENTO'] == depto]
    # Display the crime types and their counts for this department
    display(df_depto.head(10).reset_index(drop=True)) # Display top 10 crime types for the department